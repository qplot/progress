<?php



/**
 * Implements hook_menu().
 */
function qplot_progress_menu() {

  $items['task/new'] = array(
    'title' => 'Add Task',
    'page callback' => 'qplot_progress_task_edit_form',
    'page arguments' => array(NULL),
    'description' => 'add task.',
    'access callback' => TRUE,    
  );
  $items['task/%node/edit'] = array(
    'title' => 'Edit Task',
    'page callback' => 'qplot_progress_task_edit_form',
    'page arguments' => array(1),
    'description' => 'edit task.',
    'access callback' => TRUE,
  );
  $items['phase/new'] = array(
    'title' => 'Add Phase',
    'page callback' => 'qplot_progress_phase_edit_form',
    'page arguments' => array(NULL),
    'description' => 'add phase.',
    'access callback' => TRUE,    
  );
  $items['phase/%node/edit'] = array(
    'title' => 'Edit Phase',
    'page callback' => 'qplot_progress_phase_edit_form',
    'page arguments' => array(1),
    'description' => 'edit phase.',
    'access callback' => TRUE,
  );
  $items['project/new'] = array(
    'title' => 'Add Project',
    'page callback' => 'qplot_progress_project_edit_form',
    'page arguments' => array(NULL),
    'description' => 'add project.',
    'access callback' => TRUE,    
  );
  $items['project/%node/edit'] = array(
    'title' => 'Edit Project',
    'page callback' => 'qplot_progress_project_edit_form',
    'page arguments' => array(1),
    'description' => 'edit project.',
    'access callback' => TRUE,
  );  

  return $items;
}

/**
 * Implementation of hook_theme()
 */
function qplot_progress_theme() {
  return array(
    // page
    'qplot_progress_frontpage' => array(
      'variables' => array(),
      'template' => 'templates/frontpage'
    ),
    'qplot_progress_error_page' => array(
      'variables' => array('error' => NULL),
      'template' => 'templates/error_page'
    ),
    'qplot_progress_front_dashboard' => array(
    'variables' => array(),
    'template' => 'templates/front_dashboard'
    ),

    // elements
    'qplot_progress_main_menu' => array(
      'variables' => array('menu' => NULL),
      'template' => 'templates/main_menu'
    ),
    'qplot_progress_project_list' => array(
      'variables' => array('project_list' => NULL),
      'template' => 'templates/projects_list'
    ),
    'qplot_progress_login_full' => array(
      'variables' => array('form' => NULL),
      'template' => 'templates/login_full'
    ),

    // 
    'qplot_progress_status_messages' => array(
      'variables' => array('messages' => NULL),
      'template' => 'templates/status_messages'
    ),
    'qplot_progress_user_teaser' => array(
      'variables' => array('user' => NULL),
      'template' => 'templates/user_teaser'
    ),
    'qplot_progress_company_teaser' => array(
      'variables' => array('company' => NULL),
      'template' => 'templates/company_teaser'
    ),
    'qplot_progress_projects_teaser' => array(
      'variables' => array('items' => NULL),
      'template' => 'templates/projects_teaser'
    ),
    'qplot_progress_projects_menu' => array(
      'variables' => array('companies' => NULL),
      'template' => 'templates/projects_menu'
    ),
    'qplot_progress_project_overview' => array(
      'variables' => array('project' => NULL, 'items' => NULL),
      'template' => 'templates/project_overview'
    ),
    'qplot_progress_project_status' => array(
      'variables' => array('project' => NULL),
      'template' => 'templates/project_status'
    ),
    'qplot_progress_company_overview' => array(
      'variables' => array('company' => NULL, 'contacts' => NULL),
      'template' => 'templates/company_overview'
    ),
    'qplot_progress_phases_full' => array(
      'variables' => array('phases' => NULL),
      'template' => 'templates/phases_full'
    ),
    'qplot_progress_phases_table' => array(
      'variables' => array('phases' => NULL),
      'template' => 'templates/phases_table'
    ),
    'qplot_progress_tasks_table' => array(
      'variables' => array('tasks' => NULL),
      'template' => 'templates/tasks_table'
    ),
    'qplot_progress_progress_widget' => array(
      'variables' => array('progress' => 0, 'caption' => TRUE),
      'template' => 'templates/progress_widget'
    ),
    'qplot_progress_members_list' => array(
      'variables' => array('members' => NULL),
      'template' => 'templates/members_list'
    ),
    'qplot_progress_project_members' => array(
      'variables' => array('members' => NULL),
      'template' => 'templates/project_members_list'
    ),
    'qplot_progress_task_edit' => array(
      'variables' => array('values' => NULL),
      'template' => 'templates/task_edit'
    ),
    'qplot_progress_phase_edit' => array(
      'variables' => array('values' => NULL),
      'template' => 'templates/phase_edit'
    ),

    // COMPANY RELATED TEMPLATE
    'qplot_progress_projects_full' => array(
      'variables' => array('projects' => NULL),
      'template' => 'templates/projects_full'
    ),

    // PROJECT CONTENT RELATED TEMPLATE
    'qplot_progress_content_list' => array(
      'variables' => array('content' => NULL),
      'template' => 'templates/project_content_list'
    ),
    'qplot_progress_project_edit' => array(
      'variables' => array('values' => NULL),
      'template' => 'templates/project_edit'
    ),
    'qplot_progress_tasks_latest' => array(
      'variables' => array('phases' => NULL),
      'template' => 'templates/tasks_latest'
    ),
  );
}

/**
 * Implementation of hook_block_info()
 */
function qplot_progress_block_info() {
  $blocks = array(
    'frontpage' => array(
      'info' => 'Front Page'
    ),
    'error_page' => array(
      'info' => 'Error Page'
    ),
    'front_dashboard' => array(
      'info' => 'Front Dashboard'
    ),
    'main_menu' => array(
      'info' => 'Client Menu'
    ),
    'login_full' => array(
      'info' => 'Front Login'
    ),
    // User mini teaser in sidebar menu area
    // 'user_teaser' => array(
    //   'info' => ('User Teaser')
    // ),
    // Company mini teaser in sidebar menu area
    'company_teaser' => array(
      'info' => ('Company Teaser')
    ),
    // Projects mini teasers in sidebar menu area, favorites, flat
    'projects_teaser' => array(
      'info' => ('Projects Teaser')
    ),
    // Projects menu in sidebar menu area, categorized by company hierarchy
    'projects_menu' => array(
      'info' => ('Projects Menu')
    ),
    // Project overview teaser in main content area
    'project_overview' => array(
      'info' => ('Project Overview')
    ),
    // Project status in main content area
    'project_status' => array(
      'info' => ('Project Status')
    ),
    // Company overview teaser in main content area
    'company_overview' => array(
      'info' => ('Company Overview')
    ),
    // Phases tab full in main content area
    'phases_full' => array(
      'info' => ('Phases Tab Listing')
    ),
    // Phases table in main content area
    'phases_table' => array(
      'info' => ('Phases Table')
    ),
    // Tasks table of specific phase
    'tasks_table' => array(
      'info' => ('Tasks Table')
    ),
    // Company members list in main content area
    'members_list' => array(
      'info' => ('Company Members List')
    ),
    // Company members list in main content area
    'project_members' => array(
      'info' => ('Project Members List')
    ),
    // Company projects list in main content area
    'projects_full' => array(
      'info' => ('Company Projects List')
    ),
    // Project content list in main content area
    'content_list' => array(
      'info' => ('Project Content List')
    ),
    'project_list' => array(
      'info' => ('Project List')
    ),
    'tasks_latest' => array(
      'info' => ('Latest Tasks')
    ),
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view()
 */
function qplot_progress_block_view($delta = '') {
  global $user;
  $block = array();
  $block['content'] = '';

  switch ($delta) {
    case 'frontpage':
      $block['content'] = theme('qplot_progress_frontpage');
      break;
    // case 'logo_area':
    //   $block['content'] = theme('qplot_progress_logo_area');
    //   break;
    case 'front_dashboard':
    // find out all projects
      $nids = qplot_api_find_nodes2(
        array(
          'type' => 'project',
        ),
        NULL,
        TRUE,
        5
      );  
      $variables['projects'] = array();
      foreach ($nids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();

        $variables['projects'][] = array(
          'title' => $wrapper->title->value(),
          // 'icon' => $wrapper->field_project_icon->name->value(),
          // 'company' => $wrapper->field_project_company->title->value(),
          'description' => !empty($body) ? $wrapper->body->summary->value() : '',
          'progress' => $wrapper->field_project_progress->value(),
          // 'status' => $wrapper->field_project_status->name->value(),
          // 'view' => url('project/' . $wrapper->getIdentifier()),
        );
      }

      // find tasks
      $tnids = qplot_api_find_nodes2(
        array(
          'type' => 'task',
        ),
        array(
          'changed' => 'DESC'
        ),
        TRUE,
        5        
      );

      $variables['tasks'] = array();
      foreach ($tnids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        $user = user_load($node->uid);
        $profile = profile2_load_by_user($node->uid);
        $uwrapper = entity_metadata_wrapper('profile2', $profile['main']);

        $variables['tasks'][] = array(
          'title' => $wrapper->title->value(),
          'datetime' => date('Y-m-d G:i', $wrapper->changed->value()),
          'day' => date('l', $wrapper->changed->value()),
          'time' => date('g:i', $wrapper->changed->value()),
          'am/pm' => date('a', $wrapper->changed->value()),
          'fname' => $uwrapper->field_profile_first->value(),
          'lname' => $uwrapper->field_profile_last->value(),
          'company' => $wrapper->field_task_project->field_project_company->title->value(),
          'description' => !empty($body) ? $wrapper->body->summary->value() : '',
          'hours' => $wrapper->field_task_hours->value(),
          'progress' => $wrapper->field_task_progress->value(),
          'project' => $wrapper->field_task_project->title->value(),
          'phase' => $wrapper->field_task_phase->title->value(),
          'icon' => $wrapper->field_task_project->field_project_icon->name->value(),

        );
      }

      $block['content'] = theme('qplot_progress_front_dashboard', $variables);
      break;
    case 'error_page':
      $error = '';
      $desc = "We seem to have lost you in the clouds";
      $msg = "The page your looking for is not here";

      $error = arg(1);
  
      switch ($error) {
        case '403':
          $desc = "Whoops! Try look somewhere else";
          $msg = 'Not authorized to access this page';
          break;

        case '404':
          break;
        
        default:
          $error = ':)';
          $desc = "Haha, you found our eastern egg";
          $msg = "QPLOT makes CMS work";
          break;
      }

      $variables = array(
        'error' => $error,
        'description' => $desc,
        'message' => $msg,
      );
      $block['content'] = theme('qplot_progress_error_page', $variables);
      break;

    case 'main_menu':
      global $user;
      $profile = qplot_progress_user_profile($user->uid);

      $variables['menu'] = array(
        'home' => url(''),
        'user' => $profile,
      );

      if ($profile) {
        $variables['menu']['logout'] = $profile['logout'];
      }

      $block['content'] = theme('qplot_progress_main_menu', $variables);
      break;

    case 'login_full':
      global $user;
      if (!$user->uid) {
        $form = drupal_get_form('user_login_block');
        $variables['form'] = drupal_render($form);
        $block['content'] = theme('qplot_progress_login_full', $variables);
      } else {
        $block['content'] = '';
      }
      break;

    case 'company_teaser':
      // find company info and asoociated properties
      $node = node_load(4);
      $wrapper = entity_metadata_wrapper('node', $node);
      $body = $wrapper->body->value();
      $variables['company'] = array(
        'title' => $wrapper->title->value(),
        'logo' => $wrapper->field_company_logo->file->url->value(),
        'description' => !empty($body) ? $wrapper->body->value->value() : '',
        'status' => 'Active',
        'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
          'query' => drupal_get_destination()
        )),
      );

      $block['content'] = theme('qplot_progress_company_teaser', $variables);
      break;
    case 'projects_teaser':
      if (empty($user->uid)) return;
      // find out all projects and associated properties
      // $nids = qplot_api_find_nodes(
      //   array('type' => 'project'),
      //   array('field_project_company' => array(
      //     'target_id', 4, '='
      //   )),
      //   TRUE
      // );
      // find out all favorites by the current user
      $nids = array();
      $flags = flag_get_user_flags('node');
      if (!empty($flags['favorite_projects'])) {
        $nids = array_reverse(array_keys($flags['favorite_projects']));
      }
      $variables['items'] = array();
      foreach ($nids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $variables['items'][] = array(
          'title' => $wrapper->title->value(),
          'icon' => $wrapper->field_project_icon->name->value(),
          'description' => $wrapper->body->summary->value(),
          'progress' => $wrapper->field_project_progress->value(),
          'status' => $wrapper->field_project_status->name->value(),
          'view' => url('project/' . $wrapper->getIdentifier()),
        );
      }
      $block['content'] = theme('qplot_progress_projects_teaser', $variables);
      break;

    case 'projects_menu':
      if (empty($user->uid)) return;
      // find out all projects
      $nids = qplot_api_find_nodes(
        array('type' => 'project'),
        array(),
        TRUE,
        NULL,
        array('property' => array(
          'changed' => 'DESC'
        ))
      );
      foreach ($nids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $project_item = array(
          'title' => $wrapper->title->value(),
          'icon' => $wrapper->field_project_icon->name->value(),
          'company' => $wrapper->field_project_company->title->value(),
          // 'description' => $wrapper->body->summary->value(),
          'progress' => $wrapper->field_project_progress->value(),
          'status' => $wrapper->field_project_status->name->value(),
          'view' => url('project/' . $wrapper->getIdentifier()),
        );
        if (empty($project_item['company'])) {
          $project_item['company'] = 'Noname';
        }
        $variables['companies'][$project_item['company']][] = $project_item;
      }

      // $variables['companies'] = array();
      $block['content'] = theme('qplot_progress_projects_menu', $variables);
      break;

    case 'project_overview':
      // $nid = 10;
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      $node = node_load($nid);
      // find project info
      $wrapper = entity_metadata_wrapper('node', $node);
      $body = $wrapper->body->value();
      $photo = $wrapper->field_project_photo->value();

      $variables['project'] = array(
        'title' => $wrapper->title->value(),
        'photo' => !empty($photo) ? $wrapper->field_project_photo->file->url->value() : '',
        'icon' => $wrapper->field_project_icon->name->value(),
        'description' => !empty($body) ? $wrapper->body->summary->value() : '',
        'progress' => $wrapper->field_project_progress->value(),
        'status' => $wrapper->field_project_status->name->value(),
        'flag' => flag_create_link('favorite_projects', $wrapper->getIdentifier()),
        'edit' => node_access('update', $node) ? url('node/' . $wrapper->getIdentifier() . '/edit', array(
          'query' => drupal_get_destination()
        )) : '',
      );

      $company = $wrapper->field_project_company->value();
      $variables['company'] = array(
        'id' => $company->nid,
        'title' => $company->title,
        'view' => url('company/' . $company->nid),
      );

      // find phases info and associate properties
      $variables['items'] = array();
      $nids = qplot_api_find_nodes2(
        array(
          'type' => 'phase',
          'field_phase_project' => array('target_id', $nid, '=')
        ),
        array(
          'changed' => 'DESC'
        ),
        TRUE, 3
      );
      foreach ($nids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $variables['items'][] = array(
          'title' => $wrapper->title->value(),
          'description' => ($wrapper->body->raw()) ? $wrapper->body->summary->value() : '',
          'progress' => $wrapper->field_phase_progress->value(),
        );
      }

      $block['content'] = theme('qplot_progress_project_overview', $variables);
      break;

    case 'project_status':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);      
      // $comment = $wrapper->field_project_comment->value();

      $variables['project'] = array(
        'status' => $wrapper->field_project_status->name->value(),
        'hours' => $wrapper->field_project_hours->value(),
        'progress' => $wrapper->field_project_progress->value(),
        'capacity' => $wrapper->field_project_capacity->value(),
        'comment' => $wrapper->field_project_comment->value(),
      );

      $block['content'] = theme('qplot_progress_project_status', $variables);
      break;

    case 'company_overview':
      // $cid = 4;
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find project info
      $node = node_load($nid);
      // $wrapper = entity_metadata_wrapper('node', $node);
      // $node = $wrapper->field_project_company->value();

      // find company info
      $wrapper = entity_metadata_wrapper('node', $node);
      $body = $wrapper->body->value();
      $logo = $wrapper->field_company_logo->value();
      $variables['company'] = array(
        'title' => $wrapper->title->value(),
        'logo' => !empty($logo) ? $wrapper->field_company_logo->file->url->value() : '',
        'description' => !empty($body) ? $wrapper->body->value->raw() : '',
        'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
          'query' => drupal_get_destination()
        )),
      );

      // find company contacts
      $variables['contacts'] = array();
      foreach ($wrapper->field_company_contacts->getIterator() as $cwrapper) {
        $variables['contacts'][] = array(
          'name' => $cwrapper->title->value(),
          'title' => $cwrapper->field_contact_title->value(),
          'photo' => $cwrapper->field_contact_photo->file->url->value(),
          'email' => $cwrapper->field_contact_email->value(),
          'phone' => $cwrapper->field_contact_phone->value()
        );
      }

      $block['content'] = theme('qplot_progress_company_overview', $variables);
      break;

    case 'phases_full':
      // $nid = 10;
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // fill project info
      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);
      $variables['project'] = array(
        'title' => $wrapper->title->value(),
        'create_phase' => node_access('create', 'phase') ? url('phase/new', array('query' => array_merge(
          array(
            'project' => $nid,
          ), drupal_get_destination()
        ))) : '',
      );
      // find phases info
      $pnids = qplot_api_find_nodes2(
        array(
          'type' => 'phase',
          'field_phase_project' => array('target_id', $nid, '='),
        ),
        array(
          'field_phase_durating' => array('value', 'ASC')
        ),
        TRUE
      );
      $variables['phases'] = array();
      foreach ($pnids as $pid) {
        $phase = node_load($pid);
        $phase_wrapper = entity_metadata_wrapper('node', $phase);
        $body = $phase_wrapper->body->value();
        $duration = $phase_wrapper->field_phase_durating->value();
        $from = new DateTime($duration['value']);
        $to = new DateTime($duration['value2']);
        $phase_item = array(
          'title' => $phase_wrapper->title->value(),
          'description' => !empty($body) ? htmlspecialchars_decode($body['value']) : '',
          'from' => $from->format('m/d/Y'),
          'to' => $to->format('m/d/Y'),
          'hours' => $phase_wrapper->field_phase_hours->value(),
          'progress' => $phase_wrapper->field_phase_progress->value(),
          'status' => $phase_wrapper->field_phase_status->name->value(),
          // 'edit' => url('node/' . $phase_wrapper->getIdentifier() . '/edit', array(
          'edit' => node_access('update', $phase) ? url('phase/' . $phase_wrapper->getIdentifier() . '/edit', array(
            'query' => array_merge(
              array('project' => $nid),
              drupal_get_destination()
            )
          )) : '',
          'delete' => node_access('delete', $phase) ? url('node/' . $phase_wrapper->getIdentifier() . '/delete', array(
            'query' => drupal_get_destination()
          )) : '',
          // 'create' => url('node/add/task', array('query' => array_merge(
          //   array(
          //     'field_task_phase' => $pid,
          //     'field_task_project' => $nid,
          //   ), drupal_get_destination()
          // ))),
          'create_task' => node_access('create', 'task') ? url('task/new', array('query' => array_merge(
            array(
              'phase' => $pid,
              'project' => $nid,
            ), drupal_get_destination()
          ))) : '',
          'tasks' => array(),
          'focus' => FALSE,
        );

        // find tasks for this phase
        $tnids = qplot_api_find_nodes2(
          array(
            'type' => 'task',
            'field_task_phase' => array('target_id', $phase_wrapper->getIdentifier(), '='),
            'field_task_project' => array('target_id', $nid, '='),
          ),
          NULL,
          TRUE
        );
        $phase_item['group'] = array();
        foreach ($tnids as $tid) {
          $node = node_load($tid);
          $wrapper = entity_metadata_wrapper('node', $node);
          $body = $wrapper->body->value();
          $url = $wrapper->field_task_url->value();
          $member_id = $wrapper->field_task_requestby->raw();
          $tag = $wrapper->field_task_tag->value();

          $task_item = array(
            'title' => $wrapper->title->value(),
            'description' => !empty($body) ? $wrapper->body->value->raw() : '',
            'phase' => $wrapper->field_task_phase->title->value(),
            'progress' => $wrapper->field_task_progress->value(),
            'hours' => $wrapper->field_task_hours->value(),
            'added' => date('m/d/y', $wrapper->field_task_added->value()),
            'ticket' => !empty($url) ? l(
              $wrapper->field_task_url->title->value(),
              $wrapper->field_task_url->url->value(),
              array('attributes' => array('target' => '_blank'))
            ) : '',
            'tag' => !empty($tag) ? $tag->name : '',
            'request_by' => ($member_id) ? qplot_progress_user_profile($member_id) : '',
            // 'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
            'edit' => node_access('update', $node) ? url('task/' . $wrapper->getIdentifier() . '/edit', array(
              'query' => drupal_get_destination()
            )) : '',
            'delete' => node_access('delete', $node) ? url('node/' . $wrapper->getIdentifier() . '/delete', array(
              'query' => drupal_get_destination()
            )) : '',
          );

          $phase_item['tasks'][] = $task_item;

          // group task using tag
          $group = $task_item['tag'];
          if (!$group) $group = 'Not-categorized';
          // init group
          if (empty($phase_item['group'][$group])) {
            $phase_item['group'][$group] = array(
              'tasks' => array(),
              'hours' => 0,
              'progress' => 0,
            );
          }
          $phase_item['group'][$group]['tasks'][] = count($phase_item['tasks']) - 1;
          $phase_item['group'][$group]['hours'] = $phase_item['group'][$group]['hours'] + $task_item['hours'];
          $phase_item['group'][$group]['progress'] = $phase_item['group'][$group]['progress'] + $task_item['hours'] * $task_item['progress'];
        }
        // update final progress
        foreach ($phase_item['group'] as &$g) {
          $g['progress'] = intval($g['progress'] / $g['hours']);
        }

        ksort($phase_item['group'], SORT_STRING);
        $variables['phases'][] = $phase_item;
      }
      // set current phase
      if (!empty($variables['phases'])) {
        $variables['phases'][0]['focus'] = TRUE;
      }

      $block['content'] = theme('qplot_progress_phases_full', $variables);
      break;

    case 'phases_table':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find projects list
      $pnids = qplot_api_find_nodes(
        array('type' => 'project'),
        array('field_project_company' => array(
          'target_id', $nid, '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'changed' => 'DESC'
        ))
      );
      $variables['projects'] = array();
      foreach ($pnids as $pid) {
        // get project info
        $project = node_load($pid);
        $project_wrapper = entity_metadata_wrapper('node', $project);
        
        // find phases list
        $phnids = qplot_api_find_nodes(
          array('type' => 'phase'),
          array('field_phase_project' => array(
            'target_id', $pid, '='
          )),
          TRUE,
          NULL,
          array('property' => array(
            'changed' => 'DESC'
          ))
        );

        $phases = array();
        foreach ($phnids as $phid) {
          $phase = node_load($phid);
          $phase_wrapper = entity_metadata_wrapper('node', $phase);
          $duration = $phase_wrapper->field_phase_durating->value();
          $from = new DateTime($duration['value']);
          $to = new DateTime($duration['value2']);

          $phases[] = array(
            'title' => $phase_wrapper->title->value(),
            'progress' => $phase_wrapper->field_phase_progress->value(),
            'from' => $from->format('H j'),
            'to' => $to->format('F j'),
            'hours' => $phase_wrapper->field_phase_hours->value(),
            'view' => url('project/' . $pid),
            'edit' => url('phase/' . $phase_wrapper->getIdentifier() . '/edit', array(
              'query' => array_merge(
                array('project' => $pid),
                drupal_get_destination()
              )
            )),
            'delete' => url('node/' . $phase_wrapper->getIdentifier() . '/delete', array(
              'query' => drupal_get_destination()
            )),
          );
        }
        $variables['projects'][] = array(
          'id' => $pid,
          'title' => $project_wrapper->title->value(),
          'icon' => $project_wrapper->field_project_icon->name->value(),
          'phases' => $phases,
          'create_phase' => url('phase/new', array('query' => array_merge(
            array(
              'project' => $pid,
            ), drupal_get_destination()
          ))),
        );
      }

      $block['content'] = theme('qplot_progress_phases_table', $variables);
      break;

    case 'tasks_table':
      // find tasks of one phase for now
      $variables['tasks'] = array();
      $tnids = qplot_api_find_nodes(
        array('type' => 'task'),
        array('field_task_phase' => array(
          'target_id', 16, '='
        )),
        TRUE
      );
      foreach ($tnids as $tid) {
        $node = node_load($tid);
        $wrapper = entity_metadata_wrapper('node', $node);
        $variables['tasks'][] = array(
          'title' => $wrapper->title->value(),
          // 'description' => $wrapper->body->value()->value(),
          'phase' => $wrapper->field_task_phase->title->value(),
          'progress' => $wrapper->field_task_progress->value(),
          'hours' => $wrapper->field_task_hours->value(),
          'added' => date('m/d/y', $wrapper->field_task_added->value()),
          'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
            'query' => drupal_get_destination()
          )),
        );
      }

      $block['content'] = theme('qplot_progress_tasks_table', $variables);
      break;

    case 'members_list':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find project info
      $node = node_load($nid);
      // $wrapper = entity_metadata_wrapper('node', $node);
      // $node = $wrapper->field_project_company->value();

      // find company info
      $cwrapper = entity_metadata_wrapper('node', $node);
      $icon = $cwrapper->field_company_icon->value();

      // find members list
      $uids = qplot_api_find_nodes(
        NULL,
        array('og_user_node' => array(
          'target_id', $cwrapper->getIdentifier(), '='
        )),
        TRUE,
        array('entity_type' => 'user')
      );
      $variables['members'] = array();
      foreach ($uids as $uid) {
        $profile = profile2_load_by_user($uid);
        // dsm($profile);
        $wrapper = entity_metadata_wrapper('profile2', $profile['main']);
        $photo = $wrapper->field_profile_photo->value();

        $variables['members'][] = array(
          'id' => $uid,
          'first' => $wrapper->field_profile_first->value(),
          'last' => $wrapper->field_profile_last->value(),
          'title' => $wrapper->field_profile_title->value(),
          'photo' => !empty($photo) ? $wrapper->field_profile_photo->file->url->value() : '',
          'icon' => !empty($icon) ? $cwrapper->field_company_icon->file->url->value() : '',
        );
      }

      $block['content'] = theme('qplot_progress_members_list', $variables);
      break;

    case 'project_members':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');
      $node = node_load($nid);

      // find project info
      $variables['project'] = array(
        'invite' => node_access('update', $node) ? url("group/node/$nid/admin/people/add-user", array(
          'query' => drupal_get_destination()
        )) : '',
        'manage' => node_access('update', $node) ? url("group/node/$nid/admin/people") : '',
      );

      $variables['members'] = qplot_progress_project_members($nid);
      $block['content'] = theme('qplot_progress_project_members', $variables);
      break;

    case 'projects_full': 
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find company info
      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);
      $variables['company'] = array(
        'id' => $nid,
        'title' => $wrapper->title->value(),
        'create_project' => url('project/new', array('query' => array_merge(
          array(
            'company' => $nid,
          ), drupal_get_destination()
        ))),
      );

      // find projects list
      $pnids = qplot_api_find_nodes(
        array('type' => 'project'),
        array('field_project_company' => array(
          'target_id', $nid, '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'changed' => 'DESC'
        ))
      );
      $variables['projects'] = array();
      foreach ($pnids as $pid) {
        $project = node_load($pid);
        $project_wrapper = entity_metadata_wrapper('node', $project);
        $body = $project_wrapper->body->value();

        $variables['projects'][] = array(
          'title' => $project_wrapper->title->value(),
          'created' => date('F j, Y', $project_wrapper->created->value()),
          'icon' => $project_wrapper->field_project_icon->name->value(),
          'description' => !empty($body) ? $project_wrapper->body->summary->value() : '',
          'progress' => $project_wrapper->field_project_progress->value(),
          'status' => $project_wrapper->field_project_status->name->value(),
          'capacity' => $project_wrapper->field_project_capacity->value(),
          'view' => url('project/' . $project_wrapper->getIdentifier()),
          'edit' => url('project/' . $project_wrapper->getIdentifier() . '/edit', array(
            'query' => array_merge(
              array('company' => $nid),
              drupal_get_destination()
            )
          )),
          'delete' => url('node/' . $project_wrapper->getIdentifier() . '/delete', array(
            'query' => drupal_get_destination()
          )),
        );
      }

      $block['content'] = theme('qplot_progress_projects_full', $variables);
      break;

    case 'content_list':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find contents
      $ids = qplot_api_find_nodes(
        array('type' => 'content'),
        array('field_content_project' => array(
          'target_id', $nid, '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'created' => 'ASC'
        ))
      );

      $variables['content'] = array();
      foreach ($ids as $id) {
        $node = node_load($id);
        $variables['content'][] = array(
          'title' => $node->title,
          'edit' => url('node/' . $id . '/edit', array(
            'query' => array_merge(
              array('field_content_project' => $id),
              drupal_get_destination()
            )
          )),          
        );
      }

      $project = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $project);
      $variables['pages'] = array();
      foreach ($wrapper->field_project_pages->getIterator() as $term) {
        $variables['pages'][] = array(
          'title' => $term->name->value(),
        );
      }

      $variables['project'] = array(
        'create_content' => node_access('update', $project) ? url('node/add/content', array('query' => array_merge(
          array(
            'field_content_project' => $nid,
          ), drupal_get_destination()
        ))) : '',
      );

      $block['content'] = theme('qplot_progress_content_list', $variables);
      break;
    case 'project_list':
      // find out all projects
      $nids = qplot_api_find_nodes2(
        array(
          'type' => 'project',
        ),
        NULL,
        TRUE        
      );
      $variables['projects'] = array();
      foreach ($nids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();

        $variables['projects'][] = array(
          'title' => $wrapper->title->value(),
          // 'icon' => $wrapper->field_project_icon->name->value(),
          // 'company' => $wrapper->field_project_company->title->value(),
          'description' => !empty($body) ? $wrapper->body->summary->value() : '',
          'progress' => $wrapper->field_project_progress->value(),
          // 'status' => $wrapper->field_project_status->name->value(),
          // 'view' => url('project/' . $wrapper->getIdentifier()),
        );
      }

      $block['content'] = theme('qplot_progress_project_list', $variables);
      break;

    default:
      # code...
      break;
  }

  return $block;
}

/**
 * Update phase progress based on its tasks
 *
 * @param object $node
 *   Tasks node object
 */
function qplot_progress_update_phase_progress($node) {
  // dsm($node);
  // find task's phase
  $delete = !isset($node->is_new);
  $twrapper = entity_metadata_wrapper('node', $node);
  $tid = $twrapper->getIdentifier();
  $pid = $twrapper->field_task_phase->raw();
  $prid = $twrapper->field_task_project->raw();

  // find all tasks belonging to that phase
  $tnids = qplot_api_find_nodes2(
    array(
      'type' => 'task',
      'field_task_phase' => array('target_id', $pid, '='),
      'field_task_project' => array('target_id', $prid, '='),
    ),
    NULL,
    TRUE
  );

  $hours = 0.0;
  $progress = 0;
  foreach ($tnids as $nid) {
    if ($tid == $nid) {
      // for delete operation, skip this record
      if ($delete) continue;
      // for save operation, use the latest record
      $h = $twrapper->field_task_hours->value();
      $hours = $hours + $h;
      $progress = $progress + $twrapper->field_task_progress->value() * $h / 100;
    } else {
      $task = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $task);

      $h = $wrapper->field_task_hours->value();
      $hours = $hours + $h;
      $progress = $progress + $wrapper->field_task_progress->value() * $h / 100;
    }
  }
  $progress = !empty($hours) ? round($progress / $hours * 100) : 0;

  $phase = node_load($pid);
  $wrapper = entity_metadata_wrapper('node', $phase);
  $wrapper->field_phase_hours->set($hours);
  $wrapper->field_phase_progress->set($progress);
  $wrapper->save();


  // create message for notification
  // global $user;
  // $message = message_create('task', array('uid' => $user->uid));
  // $wrapper = entity_metadata_wrapper('message', $message);
  // if (!$delete) {
  //   $wrapper->field_message_node->set($node);
  // }
  // $wrapper->save();
}

/**
 * Update project progress based on its phases
 *
 * @param object $node
 *   Tasks node object
 */
function qplot_progress_update_project_progress($node) {
  // dsm($node);
  // find phase's project
  $delete = !isset($node->is_new);
  $current_phase_id = $node->nid;
  $current_phase_wrapper = entity_metadata_wrapper('node', $node);
  $project_ids = $current_phase_wrapper->field_phase_project->raw();

  // update has two schemas
  $all = TRUE;

  // for each project we're going to update their status
  foreach ($project_ids as $project_id) {
    if ($all) {
      // update according to all phases

      // find all phases belonging to this project
      $phase_ids = qplot_api_find_nodes2(
        array(
          'type' => 'phase',
          'field_phase_project' => array('target_id', $project_id, '='),
        ),
        NULL,
        TRUE
      );

      $hours = 0;
      $progress = 0;
      $capability = 0;
      foreach ($phase_ids as $phase_id) {
        // since the record is not updated in database yet
        // we have to fetch it here
        if ($phase_id == $current_phase_id) {
          if ($delete) continue;
          $phase_wrapper = $current_phase_wrapper;
        } else {
          $phase = node_load($phase_id);
          $phase_wrapper = entity_metadata_wrapper('node', $phase);
        }
        $h = $phase_wrapper->field_phase_hours->value();
        $hours = $hours + $h;
        $progress = $progress + $phase_wrapper->field_phase_progress->value() * $h / 100;
      }
      $progress = !empty($hours) ? round($progress / $hours * 100) : 0;
    } else {
      // update according to the latest phase that has been updated
      $progress = $pwrapper->field_phase_progress->value();
    }

    // update project record
    $project = node_load($project_id);
    $wrapper = entity_metadata_wrapper('node', $project);
    $wrapper->field_project_hours->set($hours);
    $wrapper->field_project_progress->set($progress);
    $wrapper->save();
  } 

}

/**
 * Get user profile
 */
function qplot_progress_user_profile($uid) {
  if ($uid) { 
    $user = user_load($uid);
    $uwrapper = entity_metadata_wrapper('user', $user);

    // get profile info
    $profile = profile2_load_by_user(intval($uid));
    $wrapper = entity_metadata_wrapper('profile2', $profile['main']);
    $photo = $wrapper->field_profile_photo->value();

    // get company info
    $company = array();
    $project = array();
    foreach ($uwrapper->og_user_node->getIterator() as $nwrapper) {
      $type = $nwrapper->type->value();
      switch ($type) {
        case 'company':
          $company[] = array(
            'id' => $nwrapper->getIdentifier(),
            'title' => $nwrapper->title->value(),
            'view' => url('company/' . $nwrapper->getIdentifier()),
          );
          break;
        
        case 'project':
          $project[] = array(
            'id' => $nwrapper->getIdentifier(),
            'title' => $nwrapper->title->value(),
            'view' => url('project/' . $nwrapper->getIdentifier()),
          );
          break;
        
        default:
          # code...
          break;
      }
    }

    return array(
      'id' => $user->uid,
      'name' => $user->name,
      'roles' => $user->roles,
      'first' => $wrapper->field_profile_first->value(),
      'last' => $wrapper->field_profile_last->value(),
      'title' => $wrapper->field_profile_title->value(),
      'photo' => !empty($photo) ? $wrapper->field_profile_photo->file->url->value() : '',
      'company' => $company,
      'project' => $project,
      'logout' => url('user/logout'),
    );
  } else {
    return '';
  }
}

/**
 * Get project member list
 */
function qplot_progress_project_members($project_id) {
  // find members list
  $mids = qplot_api_find_nodes(
    array('gid' => $project_id),
    NULL,
    TRUE,
    array('entity_type' => 'og_membership')
  );
  $members = array();
  foreach ($mids as $mid) {
    $membership = og_membership_load($mid);
    $member_wrapper = entity_metadata_wrapper('og_membership', $membership);
    $uid = $membership->etid;

    // skip system admin user
    if ($uid == 1) continue;

    $profile = profile2_load_by_user($uid);
    // dsm($profile);
    $wrapper = entity_metadata_wrapper('profile2', $profile['main']);
    $photo = $wrapper->field_profile_photo->value();

    $member_item = array(
      'id' => $uid,
      'first' => $wrapper->field_profile_first->value(),
      'last' => $wrapper->field_profile_last->value(),
      'title' => $member_wrapper->field_og_membership_title->value(),
      'photo' => !empty($photo) ? $wrapper->field_profile_photo->file->url->value() : '',
      'companies' => array(),
    );

    // find out user's company
    $account = user_load($uid);
    $nids = og_get_groups_by_user($account);
    foreach ($nids['node'] as $nid) {
      $node = node_load(intval($nid));
      $cwrapper = entity_metadata_wrapper('node', $node);
      if ($node->type == 'company') {
        $icon = $cwrapper->field_company_icon->value();
        $member_item['companies'][] = array(
          'id' => $node->nid,
          'icon' => !empty($icon) ? $cwrapper->field_company_icon->file->url->value() : '',
        );
      }
    }
    $members[] = $member_item;
  }

  return $members;
}

/**
 * Update views structure
 */
function qplot_progress_views_pre_build(&$view) {
  // dsm($view);
  // dsm($view->field['edit_node']);
  // $edit = &$view->field['edit_node'];
  // $edit->options['label'] = '';
  // dsm($view->display_handler);
  // dsm($view->display_handler)
}

/**
 * Update views render
 * With respect to views template, settings are all data
 */
function qplot_progress_views_pre_render(&$view) {
  // dsm($view);
  // dsm($view->display_handler);
  // dsm($view->field['edit_node']);
  // Add a icon to edit button.
  // $edit = &$view->field['edit_node'];
  // $edit->options['label'] = "";
  // $edit->options['alter']['alter_text'] = TRUE;
  // $edit->options['alter']['text'] = '<i class="fa fa-edit"></i>';
}

/**
 * Edit task page
 */
// function qplot_progress_task_edit_page($node) {
//   module_load_include('inc', 'node', 'node.pages');
//   $form = drupal_get_form('task_node_form', $node);
//   return drupal_render($form);
// }

// function qplot_progress_form_alter(&$form, &$form_state, $form_id) {
//   // dsm($form_id);
// }

/**
 * Custom edit page for task
 */
function qplot_progress_task_edit_form($node) {  
  // dsm($_POST);
  $op = 'View';
  if (!empty($_POST['op'])) {
    $op = $_POST['op'];
  }
  switch ($op) {
    case 'View':
      $edit = !empty($node);

      // determine the phases, projects, selected phase and select project id

      // initial data
      $variables['values'] = array(
        'id' => 0,
        'title' => '',
        'date' => date('m/d/Y'),
        'hours' => '0',
        'description' => '',
        'caption' => '',
        'url' => '',
        'status' => FALSE,
        'progress' => 0,
        'phases' => array(),
        'phase_id' => 0,
        'project_id' => 0,
        'user_id' => '',
        'tag_id' => '',
      );

      // go through each field and sort out the value based on new or edit
      if ($edit) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        $url = $wrapper->field_task_url->value();
        // $progress = $wrapper->field_task_progress->value();
        $project_id = $wrapper->field_task_project->raw();
        $phase_id = $wrapper->field_task_phase->raw();
        $user_id = $wrapper->field_task_requestby->raw();

        $variables['values'] = array(
          'id' => $wrapper->getIdentifier(),
          'title' => $wrapper->title->value(),
          'date' => date('m/d/Y', $wrapper->field_task_added->value()),
          'caption' => !empty($url) ? $url['title'] : '',
          'url' => !empty($url) ? $url['url'] : '',
          'hours' => $wrapper->field_task_hours->value(),
          'description' => !empty($body) ? $wrapper->body->value->value() : '',
          'progress' => $wrapper->field_task_progress->value(),
          'user_id' => !empty($user_id) ? $wrapper->field_task_requestby->raw() : '',
          'tag_id' => $wrapper->field_task_tag->raw(),
        ); 
      } else {
        // get company id
        $project_id = $_GET['project'];
        $phase_id = $_GET['phase'];
      }

      // phase_id is the main chain, $project_id is only the secondary chain
      $phase = node_load($phase_id);
      $phase_wrapper = entity_metadata_wrapper('node', $phase);
      $phases = array();
      foreach ($phase_wrapper->field_phase_project->getIterator() as $project_wrapper) {
        $project = array(
          'id' => $project_wrapper->getIdentifier(),
          'title' => $project_wrapper->title->value(),
          'phases' => array(),
        );

        // get the phases list
        $pnids = qplot_api_find_nodes(
          array('type' => 'phase'),
          array('field_phase_project' => array(
            'target_id', $project_wrapper->getIdentifier(), '='
          )),
          TRUE,
          NULL,
          array(
            'field_phase_durating' => array('value', 'ASC')
          )
        );
        $items = array();
        foreach ($pnids as $pid) {
          $node = node_load($pid);
          $items[] = array(
            'id' => $pid, 
            'title' => $node->title,
          );
        }
        $project['phases'] = $items;
        $phases[] = $project;
      }

      // get a list of all tags 
      $vid = taxonomy_vocabulary_machine_name_load('task_tag')->vid;
      $tree = taxonomy_get_tree($vid);
      $variables['tags'] = array();
      foreach ($tree as $value) {
        $variables['tags'][] = array(
          'id' => $value->tid,
          'name' => $value->name,
        );
      }

      // get all members in this project
      $variables['members'] = qplot_progress_project_members($project_id);

      // finalize the common values
      $variables['values'] = array_merge($variables['values'], array(
        'phases' => $phases,
        'phase_id' => $phase_id,
        'project_id' => $project_id,
      ));
      $variables['form'] = array(
        'submit' => '',
        'destination' => $_GET['destination'],
      );

      return theme('qplot_progress_task_edit', $variables);
      break;

    case 'Save':
      $edit = !empty($node);

      $wrapper = NULL;
      if (!$edit) {
        $node = entity_create('node', array('type' => 'task'));
        $wrapper = entity_metadata_wrapper('node', $node);
        global $user;
        $node->uid = $user->uid;
      } else {
        $wrapper = entity_metadata_wrapper('node', $node);
      }
      $wrapper->title->set($_POST['title']);
      $date = new DateTime($_POST['date']);
      $wrapper->field_task_added->set($date->getTimestamp());
      $progress = !empty($_POST['completed']) ? 100 : $_POST['progress'];
      $wrapper->field_task_progress->set($progress);
      $hours = explode(' ', $_POST['hours']);
      $wrapper->field_task_hours->set($hours[0]);
      $wrapper->body->set(array(
        'value' => htmlspecialchars($_POST['description']),
        'format' => 'filtered_html',
      ));
      $wrapper->field_task_url->set(array(
        'title' => $_POST['caption'],
        'url' => $_POST['url'],
      ));
      if (!empty($_POST['member_id'])) {
        $node->field_task_requestby['und'][0]['target_id'] = $_POST['member_id'];
      }
      if (!empty($_POST['tag_id'])) {
        $wrapper->field_task_tag->set($_POST['tag_id']);      
      }

      $phase = explode('_', $_POST['phase_id']);
      if (count($phase) > 2) {
        $node->field_task_phase['und'][0]['target_id'] = intval($phase[1]);
        $node->field_task_project['und'][0]['target_id'] = intval($phase[2]);
      }


      // $wrapper->field_task_phase->set(array(array(
      //   'target_id' => intval($_POST['phase_id']),
      //   'target_type' => 'node'
      // )));
      $wrapper->save();

      if (!empty($_POST['destination'])) {
        drupal_set_message('task ' . $_POST['title'] . ' saved');
        drupal_goto($_POST['destination']);
      } else {
        return 'submitted';
      }
      break;
    
    case 'Cancel':
    default:
      if (!empty($_POST['destination'])) {
        drupal_goto($_POST['destination']);
      }
      break;
  }
}

/**
 * Custom edit page for phase
 */
function qplot_progress_phase_edit_form($node) {
  // dsm($_POST);
  $op = 'View';
  if (!empty($_POST['op'])) {
    $op = $_POST['op'];
  }
  switch ($op) {
    case 'View':
      $edit = !empty($node);

      // initial data
      $variables['values'] = array(
        'id' => 0,
        'title' => '',
        'from' => date('m/d/Y'),
        'to' => date('m/d/Y'),
        'hours' => '0',
        'progress' => 0,
        'description' => '',
        'status' => 0,
        'capacity' => 0,
        'projects' => array(),
        'project_id' => 0,
      );

      // go through each field and sort out the value based on new or edit
      if ($edit) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        $progress = $wrapper->field_phase_progress->value();
        $project_ids = $wrapper->field_phase_project->raw();
        $duration = $wrapper->field_phase_durating->value();
        $from = new DateTime($duration['value']);
        $to = new DateTime($duration['value2']);

        $variables['values'] = array(
          'id' => $wrapper->getIdentifier(),
          'title' => $wrapper->title->value(),
          'from' => $from->format('m/d/Y'),
          'to' => $to->format('m/d/Y'),
          'progress' => $wrapper->field_phase_progress->value(),
          'hours' => $wrapper->field_phase_hours->value(),
          'description' => !empty($body) ? $wrapper->body->value->value() : '',
          'status_id' => $wrapper->field_phase_status->raw(),
          // 'capacity' => $wrapper->field_phase_capacity->value(),
        ); 
      } else {
        $project_ids = array($_GET['project']);
      }

      // get phase status list
      $vid = taxonomy_vocabulary_machine_name_load('phase_status')->vid;
      $tree = taxonomy_get_tree($vid);
      $variables['status'] = array();
      foreach ($tree as $value) {
        $variables['status'][] = array(
          'id' => $value->tid,
          'name' => $value->name,
        );
      }
      
      // get project id from user  
      // $project_id = $_GET['project'];
      $project = node_load($project_ids[0]);
      $project_wrapper = entity_metadata_wrapper('node', $project);
      $company = $project_wrapper->field_project_company->value();
      $company_wrapper = entity_metadata_wrapper('node', $company);

      // get the project list
      $pnids = qplot_api_find_nodes(
        array('type' => 'project'),
        array('field_project_company' => array(
          'target_id', $company_wrapper->getIdentifier(), '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'created' => 'DESC'
        ))
      );
      $projects = array();
      foreach ($pnids as $pid) {
        $node = node_load($pid);
        $projects[] = array(
          'id' => $pid, 
          'title' => $node->title,
          // 'checked' => in_array($pid, $project_ids),
        );
      }

      // finalize the common values
      $variables['values'] = array_merge($variables['values'], array(
        'projects' => $projects,
        'project_ids' => $project_ids,
      ));
      $variables['form'] = array(
        'submit' => '',
        'destination' => $_GET['destination'],
      );

      return theme('qplot_progress_phase_edit', $variables);
      break;

    case 'Save':
      $edit = !empty($node);

      $wrapper = NULL;
      if (!$edit) {
        $node = entity_create('node', array('type' => 'phase'));
        $wrapper = entity_metadata_wrapper('node', $node);
        global $user;
        $node->uid = $user->uid;
      } else {
        $wrapper = entity_metadata_wrapper('node', $node);
      }
      $wrapper->title->set($_POST['title']);
      $from = new DateTime($_POST['from']);
      $to = new DateTime($_POST['to']);
      $wrapper->field_phase_durating->set(array(
        'value' => $from->format('Y-m-d H:i:s'),
        'value2' => $to->format('Y-m-d H:i:s'),
        'date_type' => 'datetime',
      ));
      // $wrapper->field_task_added->set($date->getTimestamp());
      // $wrapper->field_phase_progress->set($_POST['progress']);
      // $hours = explode(' ', $_POST['hours']);
      // $wrapper->field_phase_hours->set($hours[0]);
      $wrapper->field_phase_status->set($_POST['status_id']);
      // $wrapper->field_phase_capacity->set($_POST['capacity']);
      $wrapper->body->set(array(
        'value' => htmlspecialchars($_POST['description']),
        'format' => 'filtered_html',
      ));
      $node->field_phase_project['und'] = array();
      foreach ($_POST['project_ids'] as $value) {
        $node->field_phase_project['und'][]['target_id'] = $value;
      }

      $wrapper->save();

      if (!empty($_POST['destination'])) {
        drupal_set_message('phase: ' . $_POST['title'] . ' saved');
        drupal_goto($_POST['destination']);
      } else {
        return 'submitted';
      }
      break;
    
    case 'Cancel':
    default:
      if (!empty($_POST['destination'])) {
        drupal_goto($_POST['destination']);
      }
      break;
  }
}

/**
 * Custom edit page for project
 */
function qplot_progress_project_edit_form($node) {
  // dsm($_POST);
  $op = 'View';
  if (!empty($_POST['op'])) {
    $op = $_POST['op'];
  }
  switch ($op) {
    case 'View':
      $edit = !empty($node);

      // initial data
      $variables['values'] = array(
        'id' => 0,
        'title' => '',
        'caption' => '',
        'url' => '',
        'capacity' => '0',
        'description' => '',
        'status' => TRUE,
        'progress' => 0,
        'icon' => '',
        'photo' => '',
        'content' => array(),
        'pages' => array(),
      );

      // go through each field and sort out the value based on new or edit
      if ($edit) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        $url = $wrapper->field_project_url->value();
        $icon = $wrapper->field_project_icon->value();
        $photo = $wrapper->field_project_photo->value();

        $variables['values'] = array(
          'id' => $wrapper->getIdentifier(),
          'title' => $wrapper->title->value(),
          'caption' => !empty($url) ? $url['title'] : '',
          'url' => !empty($url) ? $url['url'] : '',
          'icon' => !empty($icon) ? (array)$icon : array(),
          'progress' => $wrapper->field_project_progress->value(),
          'capacity' => $wrapper->field_project_capacity->value(),
          'description' => !empty($body) ? $wrapper->body->value->value() : '',
          'photo' => !empty($photo) ? file_create_url($photo['uri']) : '',
          'status' => TRUE,
        ); 
      } else {
        // $project_ids = array($_GET['project']);
      }

      // get a list of all icon 
      $vid = taxonomy_vocabulary_machine_name_load('icons')->vid;
      $tree = taxonomy_get_tree($vid);
      $variables['icons'] = array();
      foreach ($tree as $value) {
        $variables['icons'][] = array(
          'id' => $value->tid,
          'name' => $value->name,
        );
      }

      // get the list of content
      $ids = qplot_api_find_nodes2(
        array(
          'type' => 'content',
          'field_content_project' => array('target_id', $wrapper->getIdentifier(), '='),
        ),
        array(
          'created' => 'ASC'
        ),
        TRUE
      );

      $variables['content'] = array();
      foreach ($ids as $id) {
        $content = node_load($id);
        $variables['content'][] = $content->title;
      }

      // finalize the common values
      $variables['values'] = array_merge($variables['values'], array(
        // 'projects' => $projects,
        // 'project_ids' => $project_ids,
      ));
      $variables['form'] = array(
        'submit' => '',
        'destination' => $_GET['destination'],
      );

      return theme('qplot_progress_project_edit', $variables);
      break;

    case 'Save':
      $edit = !empty($node);

      $wrapper = NULL;
      if (!$edit) {
        $node = entity_create('node', array('type' => 'project'));
        $wrapper = entity_metadata_wrapper('node', $node);
        global $user;
        $node->uid = $user->uid;
      } else {
        $wrapper = entity_metadata_wrapper('node', $node);
      }
      $wrapper->title->set($_POST['title']);
      $wrapper->field_project_progress->set($_POST['progress']);
      $wrapper->field_project_capacity->set($_POST['capacity']);
      $wrapper->body->set(array(
        'value' => htmlspecialchars($_POST['description']),
        'format' => 'filtered_html',
      ));
      $wrapper->field_project_url->set(array(
        'title' => $_POST['caption'],
        'url' => $_POST['url'],
      ));
      $wrapper->field_project_icon->set($_POST['icon']);

      $wrapper->save();

      if (!empty($_POST['destination'])) {
        drupal_set_message('phase: ' . $_POST['title'] . ' saved');
        drupal_goto($_POST['destination']);
      } else {
        return 'submitted';
      }
      break;
    
    case 'Cancel':
    default:
      if (!empty($_POST['destination'])) {
        drupal_goto($_POST['destination']);
      }
      break;
  }
}
