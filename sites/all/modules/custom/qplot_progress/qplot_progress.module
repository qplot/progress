<?php



/**
 * Implements hook_menu().
 */
function qplot_progress_menu() {

  $items['task/new'] = array(
    'title' => 'Add Task',
    'page callback' => 'qplot_progress_task_edit_form',
    'page arguments' => array(NULL),
    'description' => 'add task.',
    'access callback' => TRUE,    
  );
  $items['task/%node/edit'] = array(
    'title' => 'Edit Task',
    'page callback' => 'qplot_progress_task_edit_form',
    'page arguments' => array(1),
    'description' => 'edit task.',
    'access callback' => TRUE,
  );
  $items['phase/new'] = array(
    'title' => 'Add Phase',
    'page callback' => 'qplot_progress_phase_edit_form',
    'page arguments' => array(NULL),
    'description' => 'add phase.',
    'access callback' => TRUE,    
  );
  $items['phase/%node/edit'] = array(
    'title' => 'Edit Phase',
    'page callback' => 'qplot_progress_phase_edit_form',
    'page arguments' => array(1),
    'description' => 'edit phase.',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_theme()
 */
function qplot_progress_theme() {
  return array(
    'qplot_progress_status_messages' => array(
      'variables' => array('messages' => NULL),
      'template' => 'templates/status_messages'
    ),
    'qplot_progress_logo_area' => array(
      'variables' => array(),
      'template' => 'templates/logo_area'
    ),
    'qplot_progress_user_teaser' => array(
      'variables' => array('user' => NULL),
      'template' => 'templates/user_teaser'
    ),
    'qplot_progress_company_teaser' => array(
      'variables' => array('company' => NULL),
      'template' => 'templates/company_teaser'
    ),
    'qplot_progress_projects_teaser' => array(
      'variables' => array('items' => NULL),
      'template' => 'templates/projects_teaser'
    ),
    'qplot_progress_projects_menu' => array(
      'variables' => array('companies' => NULL),
      'template' => 'templates/projects_menu'
    ),
    'qplot_progress_project_overview' => array(
      'variables' => array('project' => NULL, 'items' => NULL),
      'template' => 'templates/project_overview'
    ),
    'qplot_progress_project_status' => array(
      'variables' => array('project' => NULL),
      'template' => 'templates/project_status'
    ),
    'qplot_progress_company_overview' => array(
      'variables' => array('company' => NULL, 'contacts' => NULL),
      'template' => 'templates/company_overview'
    ),
    'qplot_progress_phases_full' => array(
      'variables' => array('phases' => NULL),
      'template' => 'templates/phases_full'
    ),
    'qplot_progress_phases_table' => array(
      'variables' => array('phases' => NULL),
      'template' => 'templates/phases_table'
    ),
    'qplot_progress_tasks_table' => array(
      'variables' => array('tasks' => NULL),
      'template' => 'templates/tasks_table'
    ),
    'qplot_progress_progress_widget' => array(
      'variables' => array('progress' => 0, 'caption' => TRUE),
      'template' => 'templates/progress_widget'
    ),
    'qplot_progress_members_list' => array(
      'variables' => array('members' => NULL),
      'template' => 'templates/members_list'
    ),
    'qplot_progress_project_members' => array(
      'variables' => array('members' => NULL),
      'template' => 'templates/project_members_list'
    ),
    'qplot_progress_task_edit' => array(
      'variables' => array('values' => NULL),
      'template' => 'templates/task_edit'
    ),
    'qplot_progress_phase_edit' => array(
      'variables' => array('values' => NULL),
      'template' => 'templates/phase_edit'
    ),

    // COMPANY RELATED TEMPLATE
    'qplot_progress_projects_full' => array(
      'variables' => array('projects' => NULL),
      'template' => 'templates/projects_full'
    ),
  );
}

/**
 * Implementation of hook_block_info()
 */
function qplot_progress_block_info() {
  $blocks = array(
    // QPlot Company logo area
    'logo_area' => array(
      'info' => ('Logo Area')
    ),
    // User mini teaser in sidebar menu area
    'user_teaser' => array(
      'info' => ('User Teaser')
    ),
    // Company mini teaser in sidebar menu area
    'company_teaser' => array(
      'info' => ('Company Teaser')
    ),
    // Projects mini teasers in sidebar menu area, favorites, flat
    'projects_teaser' => array(
      'info' => ('Projects Teaser')
    ),
    // Projects menu in sidebar menu area, categorized by company hierarchy
    'projects_menu' => array(
      'info' => ('Projects Menu')
    ),
    // Project overview teaser in main content area
    'project_overview' => array(
      'info' => ('Project Overview')
    ),
    // Project status in main content area
    'project_status' => array(
      'info' => ('Project Status')
    ),
    // Company overview teaser in main content area
    'company_overview' => array(
      'info' => ('Company Overview')
    ),
    // Phases tab full in main content area
    'phases_full' => array(
      'info' => ('Phases Tab Listing')
    ),
    // Phases table in main content area
    'phases_table' => array(
      'info' => ('Phases Table')
    ),
    // Tasks table of specific phase
    'tasks_table' => array(
      'info' => ('Tasks Table')
    ),
    // Company members list in main content area
    'members_list' => array(
      'info' => ('Company Members List')
    ),
    // Company members list in main content area
    'project_members' => array(
      'info' => ('Project Members List')
    ),
    // Company projects list in main content area
    'projects_full' => array(
      'info' => ('Company Projects List')
    ),
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view()
 */
function qplot_progress_block_view($delta = '') {
  global $user;
  $block = array();
  $block['content'] = '';

  switch ($delta) {
    case 'logo_area':
      $block['content'] = theme('qplot_progress_logo_area');
      break;
    case 'user_teaser':
      if (empty($user->uid)) return;
      // find user info
      // $uid = qplot_api_find_nodes(
      //   array('type' => 'contact'),
      //   array('field_contact_user' => array(
      //     'target_id', $user->uid, '='
      //   ))
      // );
      // $node = node_load($uid);
      // $wrapper = entity_metadata_wrapper('node', $node);
      // $name = $wrapper->title->value();
      // $splits = explode(" ", $name);
      // $photo = $wrapper->field_contact_photo->value();

      // $variables['user'] = array(
      //   'first' => (count($splits) >= 1) ? $splits[0] : '',
      //   'last' => (count($splits) >= 2) ? $splits[1] : '',
      //   'photo' => !empty($photo) ? $wrapper->field_contact_photo->file->url->value() : '',
      //   'status' => 'Online',
      // );

      // Switch to use profile2 instead
      $profile = profile2_load_by_user($user->uid);
      $wrapper = entity_metadata_wrapper('profile2', $profile['main']);
      $photo = $wrapper->field_profile_photo->value();

      $variables['user'] = array(
        'id' => $user->uid,
        'first' => $wrapper->field_profile_first->value(),
        'last' => $wrapper->field_profile_last->value(),
        // 'title' => $wrapper->field_profile_title->value(),
        'photo' => !empty($photo) ? $wrapper->field_profile_photo->file->url->value() : '',
        'status' => 'Online',
      );

      $block['content'] = theme('qplot_progress_user_teaser', $variables);
      break;

    case 'company_teaser':
      // find company info and asoociated properties
      $node = node_load(4);
      $wrapper = entity_metadata_wrapper('node', $node);
      $body = $wrapper->body->value();
      $variables['company'] = array(
        'title' => $wrapper->title->value(),
        'logo' => $wrapper->field_company_logo->file->url->value(),
        'description' => !empty($body) ? $wrapper->body->value->value() : '',
        'status' => 'Active',
        'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
          'query' => drupal_get_destination()
        )),
      );

      $block['content'] = theme('qplot_progress_company_teaser', $variables);
      break;
    case 'projects_teaser':
      if (empty($user->uid)) return;
      // find out all projects and associated properties
      // $nids = qplot_api_find_nodes(
      //   array('type' => 'project'),
      //   array('field_project_company' => array(
      //     'target_id', 4, '='
      //   )),
      //   TRUE
      // );
      // find out all favorites by the current user
      $nids = array();
      $flags = flag_get_user_flags('node');
      if (!empty($flags['favorite_projects'])) {
        $nids = array_reverse(array_keys($flags['favorite_projects']));
      }
      $variables['items'] = array();
      foreach ($nids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $variables['items'][] = array(
          'title' => $wrapper->title->value(),
          'icon' => $wrapper->field_project_icon->name->value(),
          'description' => $wrapper->body->summary->value(),
          'progress' => $wrapper->field_project_progress->value(),
          'status' => $wrapper->field_project_status->name->value(),
          'view' => url('project/' . $wrapper->getIdentifier()),
        );
      }
      $block['content'] = theme('qplot_progress_projects_teaser', $variables);
      break;

    case 'projects_menu':
      if (empty($user->uid)) return;
      // find out all projects
      $nids = qplot_api_find_nodes(
        array('type' => 'project'),
        array(),
        TRUE,
        NULL,
        array('property' => array(
          'changed' => 'DESC'
        ))
      );
      foreach ($nids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $project_item = array(
          'title' => $wrapper->title->value(),
          'icon' => $wrapper->field_project_icon->name->value(),
          'company' => $wrapper->field_project_company->title->value(),
          // 'description' => $wrapper->body->summary->value(),
          'progress' => $wrapper->field_project_progress->value(),
          'status' => $wrapper->field_project_status->name->value(),
          'view' => url('project/' . $wrapper->getIdentifier()),
        );
        if (empty($project_item['company'])) {
          $project_item['company'] = 'Noname';
        }
        $variables['companies'][$project_item['company']][] = $project_item;
      }

      // $variables['companies'] = array();
      $block['content'] = theme('qplot_progress_projects_menu', $variables);
      break;

    case 'project_overview':
      // $nid = 10;
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      $node = node_load($nid);
      // find project info
      $wrapper = entity_metadata_wrapper('node', $node);
      $body = $wrapper->body->value();
      $photo = $wrapper->field_project_photo->value();

      $variables['project'] = array(
        'title' => $wrapper->title->value(),
        'photo' => !empty($photo) ? $wrapper->field_project_photo->file->url->value() : '',
        'icon' => $wrapper->field_project_icon->name->value(),
        'description' => !empty($body) ? $wrapper->body->summary->value() : '',
        'progress' => $wrapper->field_project_progress->value(),
        'status' => $wrapper->field_project_status->name->value(),
        'company' => $wrapper->field_project_company->title->value(),
        'flag' => flag_create_link('favorite_projects', $wrapper->getIdentifier()),
        'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
          'query' => drupal_get_destination()
        )),
      );
      // find phases info and associate properties
      $variables['items'] = array();
      $nids = qplot_api_find_nodes(
        array('type' => 'phase'),
        array('field_phase_project' => array(
          'target_id', $nid, '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'changed' => 'DESC'
        ))
      );
      foreach ($nids as $id) {
        $node = node_load($id);
        $wrapper = entity_metadata_wrapper('node', $node);
        $variables['items'][] = array(
          'title' => $wrapper->title->value(),
          'description' => ($wrapper->body->raw()) ? $wrapper->body->summary->value() : '',
          'progress' => $wrapper->field_phase_progress->value(),
        );
      }

      $block['content'] = theme('qplot_progress_project_overview', $variables);
      break;

    case 'project_status':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);

      $variables['project'] = array(
        'progress' => $wrapper->field_project_progress->value(),
        'capacity' => $wrapper->field_project_capacity->value(),
      );

      $block['content'] = theme('qplot_progress_project_status', $variables);
      break;

    case 'company_overview':
      // $cid = 4;
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find project info
      $node = node_load($nid);
      // $wrapper = entity_metadata_wrapper('node', $node);
      // $node = $wrapper->field_project_company->value();

      // find company info
      $wrapper = entity_metadata_wrapper('node', $node);
      $body = $wrapper->body->value();
      $logo = $wrapper->field_company_logo->value();
      $variables['company'] = array(
        'title' => $wrapper->title->value(),
        'logo' => !empty($logo) ? $wrapper->field_company_logo->file->url->value() : '',
        'description' => !empty($body) ? $wrapper->body->value->raw() : '',
        'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
          'query' => drupal_get_destination()
        )),
      );

      // find company contacts
      $variables['contacts'] = array();
      foreach ($wrapper->field_company_contacts->getIterator() as $cwrapper) {
        $variables['contacts'][] = array(
          'name' => $cwrapper->title->value(),
          'title' => $cwrapper->field_contact_title->value(),
          'photo' => $cwrapper->field_contact_photo->file->url->value(),
          'email' => $cwrapper->field_contact_email->value(),
          'phone' => $cwrapper->field_contact_phone->value()
        );
      }

      $block['content'] = theme('qplot_progress_company_overview', $variables);
      break;

    case 'phases_full':
      // $nid = 10;
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // fill project info
      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);
      $variables['project'] = array(
        'title' => $wrapper->title->value(),
        // 'create' => url('node/add/phase', array('query' => array_merge(
        //   array(
        //     'field_phase_project' => $nid,
        //   ), drupal_get_destination()
        // ))),
        'create_phase' => url('phase/new', array('query' => array_merge(
          array(
            'project' => $nid,
          ), drupal_get_destination()
        ))),
      );
      // find phases info
      $pnids = qplot_api_find_nodes(
        array('type' => 'phase'),
        array('field_phase_project' => array(
          'target_id', $nid, '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'changed' => 'DESC'
        ))
      );
      $variables['phases'] = array();
      foreach ($pnids as $pid) {
        $phase = node_load($pid);
        $phase_wrapper = entity_metadata_wrapper('node', $phase);
        $duration = $phase_wrapper->field_phase_durating->value();
        $from = new DateTime($duration['value']);
        $to = new DateTime($duration['value2']);
        $phase_item = array(
          'title' => $phase_wrapper->title->value(),
          'description' => ($phase_wrapper->body->raw()) ? $phase_wrapper->body->value->value() : '',
          'from' => $from->format('m/d/Y'),
          'to' => $to->format('m/d/Y'),
          'hours' => $phase_wrapper->field_phase_hours->value(),
          'progress' => $phase_wrapper->field_phase_progress->value(),
          'status' => $phase_wrapper->field_phase_status->name->value(),
          // 'edit' => url('node/' . $phase_wrapper->getIdentifier() . '/edit', array(
          'edit' => url('phase/' . $phase_wrapper->getIdentifier() . '/edit', array(
            'query' => array_merge(
              array('project' => $nid),
              drupal_get_destination()
            )
          )),
          'delete' => url('node/' . $phase_wrapper->getIdentifier() . '/delete', array(
            'query' => drupal_get_destination()
          )),
          // 'create' => url('node/add/task', array('query' => array_merge(
          //   array(
          //     'field_task_phase' => $pid,
          //     'field_task_project' => $nid,
          //   ), drupal_get_destination()
          // ))),
          'create_task' => url('task/new', array('query' => array_merge(
            array(
              'phase' => $pid,
              'project' => $nid,
            ), drupal_get_destination()
          ))),            
          'tasks' => array(),
          'focus' => FALSE,
        );

        // find tasks for this phase
        $tnids = qplot_api_find_nodes(
          array('type' => 'task'),
          array(
            'field_task_phase' => array('target_id', $phase_wrapper->getIdentifier(), '='),
            'field_task_project' => array('target_id', $nid, '='),
          ),
          TRUE,
          NULL,
          array('property' => array(
            'changed' => 'DESC'
          ))
        );
        foreach ($tnids as $tid) {
          $node = node_load($tid);
          $wrapper = entity_metadata_wrapper('node', $node);
          $body = $wrapper->body->value();

          $task_ticket = $wrapper->field_task_ticket_url->value();
          $task_item = array(
            'title' => $wrapper->title->value(),
            'description' => !empty($body) ? $wrapper->body->value->raw() : '',
            'phase' => $wrapper->field_task_phase->title->value(),
            'progress' => $wrapper->field_task_progress->value(),
            'hours' => $wrapper->field_task_hours->value(),
            'added' => date('m/d/y', $wrapper->field_task_added->value()),
            'ticket' => !empty($task_ticket) ? l(
              $wrapper->field_task_ticket_url->title->value(),
              $wrapper->field_task_ticket_url->url->value(),
              array('attributes' => array('target' => '_blank'))
            ) : '',
            // 'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
            'edit' => url('task/' . $wrapper->getIdentifier() . '/edit', array(
              'query' => drupal_get_destination()
            )),
            'delete' => url('node/' . $wrapper->getIdentifier() . '/delete', array(
              'query' => drupal_get_destination()
            )),
          );
          // perform analysis and summary
          // $phase_item['hours'] = $phase_item['hours'] + $task_item['hours'];
          // $phase_item['progress'] = $phase_item['progress'] + $task_item['hours'] * $task_item['progress'] / 100;

          $phase_item['tasks'][] = $task_item;
        }
        // if ($phase_item['progress']) {
        //   $phase_item['progress'] = round($phase_item['progress'] / $phase_item['hours'] * 100);
        // }
        $variables['phases'][] = $phase_item;
      }
      // set current phase
      if (!empty($variables['phases'])) {
        $variables['phases'][0]['focus'] = TRUE;
      }

      $block['content'] = theme('qplot_progress_phases_full', $variables);
      break;

    case 'phases_table':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find projects list
      $pnids = qplot_api_find_nodes(
        array('type' => 'project'),
        array('field_project_company' => array(
          'target_id', $nid, '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'changed' => 'DESC'
        ))
      );
      $variables['projects'] = array();
      foreach ($pnids as $pid) {
        // get project info
        $project = node_load($pid);
        $project_wrapper = entity_metadata_wrapper('node', $project);
        
        // find phases list
        $phnids = qplot_api_find_nodes(
          array('type' => 'phase'),
          array('field_phase_project' => array(
            'target_id', $pid, '='
          )),
          TRUE,
          NULL,
          array('property' => array(
            'changed' => 'DESC'
          ))
        );

        $phases = array();
        foreach ($phnids as $phid) {
          $phase = node_load($phid);
          $phase_wrapper = entity_metadata_wrapper('node', $phase);
          $duration = $phase_wrapper->field_phase_durating->value();
          $from = new DateTime($duration['value']);
          $to = new DateTime($duration['value2']);

          $phases[] = array(
            'title' => $phase_wrapper->title->value(),
            'progress' => $phase_wrapper->field_phase_progress->value(),
            'from' => $from->format('H j'),
            'to' => $to->format('F j'),
            'hours' => $phase_wrapper->field_phase_hours->value(),
            'view' => url('project/' . $pid),
            'edit' => url('phase/' . $phase_wrapper->getIdentifier() . '/edit', array(
              'query' => array_merge(
                array('project' => $pid),
                drupal_get_destination()
              )
            )),
            'delete' => url('node/' . $phase_wrapper->getIdentifier() . '/delete', array(
              'query' => drupal_get_destination()
            )),
          );
        }
        $variables['projects'][] = array(
          'id' => $pid,
          'title' => $project_wrapper->title->value(),
          'icon' => $project_wrapper->field_project_icon->name->value(),
          'phases' => $phases,
          'create_phase' => url('phase/new', array('query' => array_merge(
            array(
              'project' => $pid,
            ), drupal_get_destination()
          ))),
        );
      }

      $block['content'] = theme('qplot_progress_phases_table', $variables);
      break;

    case 'tasks_table':
      // find tasks of one phase for now
      $variables['tasks'] = array();
      $tnids = qplot_api_find_nodes(
        array('type' => 'task'),
        array('field_task_phase' => array(
          'target_id', 16, '='
        )),
        TRUE
      );
      foreach ($tnids as $tid) {
        $node = node_load($tid);
        $wrapper = entity_metadata_wrapper('node', $node);
        $variables['tasks'][] = array(
          'title' => $wrapper->title->value(),
          // 'description' => $wrapper->body->value()->value(),
          'phase' => $wrapper->field_task_phase->title->value(),
          'progress' => $wrapper->field_task_progress->value(),
          'hours' => $wrapper->field_task_hours->value(),
          'added' => date('m/d/y', $wrapper->field_task_added->value()),
          'edit' => url('node/' . $wrapper->getIdentifier() . '/edit', array(
            'query' => drupal_get_destination()
          )),
        );
      }

      $block['content'] = theme('qplot_progress_tasks_table', $variables);
      break;

    case 'members_list':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find project info
      $node = node_load($nid);
      // $wrapper = entity_metadata_wrapper('node', $node);
      // $node = $wrapper->field_project_company->value();

      // find company info
      $cwrapper = entity_metadata_wrapper('node', $node);
      $icon = $cwrapper->field_company_icon->value();

      // find members list
      // $uids = qplot_api_find_nodes(
      //   NULL,
      //   array('og_user_node' => array(
      //     'target_id', $cwrapper->getIdentifier(), '='
      //   )),
      //   TRUE,
      //   array('entity_type' => 'user')
      // );
      $mids = qplot_api_find_nodes(
        array('gid' => $nid),
        NULL,
        TRUE,
        array('entity_type' => 'og_membership')
      );
      $variables['members'] = array();
      foreach ($mids as $mid) {
        $membership = og_membership_load($mid);
        $member_wrapper = entity_metadata_wrapper('og_membership', $membership);
        $uid = $membership->etid;
        
        $profile = profile2_load_by_user($uid);
        // dsm($profile);
        $wrapper = entity_metadata_wrapper('profile2', $profile['main']);
        $photo = $wrapper->field_profile_photo->value();

        $variables['members'][] = array(
          'id' => $uid,
          'first' => $wrapper->field_profile_first->value(),
          'last' => $wrapper->field_profile_last->value(),
          // 'title' => $wrapper->field_profile_title->value(),
          'title' => $member_wrapper->field_og_membership_title->value(),
          'photo' => !empty($photo) ? $wrapper->field_profile_photo->file->url->value() : '',
          'icon' => !empty($icon) ? $cwrapper->field_company_icon->file->url->value() : '',
        );
      }

      $block['content'] = theme('qplot_progress_members_list', $variables);
      break;

    case 'project_members':
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find project info
      $variables['project'] = array(
        'invite' => url("group/node/$nid/admin/people/add-user", array(
          'query' => drupal_get_destination()
        )),
      );

      // find members list
      $uids = qplot_api_find_nodes(
        NULL,
        array('og_user_node' => array(
          'target_id', $nid, '='
        )),
        TRUE,
        array('entity_type' => 'user')
      );
      $variables['members'] = array();
      foreach ($uids as $uid) {
        $profile = profile2_load_by_user($uid);
        // dsm($profile);
        $wrapper = entity_metadata_wrapper('profile2', $profile['main']);
        $photo = $wrapper->field_profile_photo->value();

        $member_item = array(
          'id' => $uid,
          'first' => $wrapper->field_profile_first->value(),
          'last' => $wrapper->field_profile_last->value(),
          'title' => $wrapper->field_profile_title->value(),
          'photo' => !empty($photo) ? $wrapper->field_profile_photo->file->url->value() : '',
          'companies' => array(),
        );

        // find out user's company
        $account = user_load($uid);
        $nids = og_get_groups_by_user($account);
        foreach ($nids['node'] as $nid) {
          $node = node_load(intval($nid));
          $cwrapper = entity_metadata_wrapper('node', $node);
          if ($node->type == 'company') {
            $icon = $cwrapper->field_company_icon->value();
            $member_item['companies'][] = array(
              'id' => $node->nid,
              'icon' => !empty($icon) ? $cwrapper->field_company_icon->file->url->value() : '',
            );
          }
        }

        $variables['members'][] = $member_item;
      }

      $block['content'] = theme('qplot_progress_project_members', $variables);
      break;

    case 'projects_full': 
      $nid = arg(1);
      if (empty($nid) || !is_numeric($nid)) return array('content' => '');

      // find company info
      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);
      $variables['company'] = array(
        'id' => $nid,
        'title' => $wrapper->title->value(),
        'create_project' => url('project/new', array('query' => array_merge(
          array(
            'company' => $nid,
          ), drupal_get_destination()
        ))),
      );

      // find projects list
      $pnids = qplot_api_find_nodes(
        array('type' => 'project'),
        array('field_project_company' => array(
          'target_id', $nid, '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'changed' => 'DESC'
        ))
      );
      $variables['projects'] = array();
      foreach ($pnids as $pid) {
        $project = node_load($pid);
        $project_wrapper = entity_metadata_wrapper('node', $project);
        $body = $project_wrapper->body->value();

        $variables['projects'][] = array(
          'title' => $project_wrapper->title->value(),
          'created' => date('F j, Y', $project_wrapper->created->value()),
          'icon' => $project_wrapper->field_project_icon->name->value(),
          'description' => !empty($body) ? $project_wrapper->body->summary->value() : '',
          'progress' => $project_wrapper->field_project_progress->value(),
          'status' => $project_wrapper->field_project_status->name->value(),
          'capacity' => $project_wrapper->field_project_capacity->value(),
          'view' => url('project/' . $project_wrapper->getIdentifier()),
          'edit' => url('project/' . $project_wrapper->getIdentifier() . '/edit', array(
            'query' => array_merge(
              array('company' => $nid),
              drupal_get_destination()
            )
          )),
          'delete' => url('node/' . $project_wrapper->getIdentifier() . '/delete', array(
            'query' => drupal_get_destination()
          )),
        );
      }

      $block['content'] = theme('qplot_progress_projects_full', $variables);
      break;

    default:
      # code...
      break;
  }

  return $block;
}

/**
 * Update phase progress based on its tasks
 *
 * @param object $node
 *   Tasks node object
 */
function qplot_progress_update_phase_progress($node) {
  // dsm($node);
  // find task's phase
  $delete = !isset($node->is_new);
  $twrapper = entity_metadata_wrapper('node', $node);
  $tid = $twrapper->getIdentifier();
  $pid = $twrapper->field_task_phase->raw();

  // find all tasks belonging to that phase
  $tnids = qplot_api_find_nodes(
    array('type' => 'task'),
    array('field_task_phase' => array(
      'target_id', $pid, '='
    )),
    TRUE
  );
  $hours = 0.0;
  $progress = 0;
  foreach ($tnids as $nid) {
    if ($tid == $nid) {
      // for delete operation, skip this record
      if ($delete) continue;
      // for save operation, use the latest record
      $h = $twrapper->field_task_hours->value();
      $hours = $hours + $h;
      $progress = $progress + $twrapper->field_task_progress->value() * $h / 100;
    } else {
      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);

      $h = $wrapper->field_task_hours->value();
      $hours = $hours + $h;
      $progress = $progress + $wrapper->field_task_progress->value() * $h / 100;
    }
  }
  $progress = !empty($hours) ? round($progress / $hours * 100) : 0;

  $node = node_load($pid);
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->field_phase_hours->set($hours);
  $wrapper->field_phase_progress->set($progress);
  $wrapper->save();
}

/**
 * Update project progress based on its phases
 *
 * @param object $node
 *   Tasks node object
 */
function qplot_progress_update_project_progress($node) {
  // find phase's project
  $delete = empty($node->op);
  $pwrapper = entity_metadata_wrapper('node', $node);
  $pid = $pwrapper->getIdentifier();
  $prid = $pwrapper->field_phase_project->raw();
  $progress = $pwrapper->field_phase_progress->value();

  // update project
  if (is_array($prid)) $prid = $prid[0];
  $node = node_load($prid);
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->field_project_progress->set($progress);
  $wrapper->save();
}

/**
 * Update views structure
 */
function qplot_progress_views_pre_build(&$view) {
  // dsm($view);
  // dsm($view->field['edit_node']);
  // $edit = &$view->field['edit_node'];
  // $edit->options['label'] = '';
  // dsm($view->display_handler);
  // dsm($view->display_handler)
}

/**
 * Update views render
 * With respect to views template, settings are all data
 */
function qplot_progress_views_pre_render(&$view) {
  // dsm($view);
  // dsm($view->display_handler);
  // dsm($view->field['edit_node']);
  // Add a icon to edit button.
  // $edit = &$view->field['edit_node'];
  // $edit->options['label'] = "";
  // $edit->options['alter']['alter_text'] = TRUE;
  // $edit->options['alter']['text'] = '<i class="fa fa-edit"></i>';
}

/**
 * Edit task page
 */
// function qplot_progress_task_edit_page($node) {
//   module_load_include('inc', 'node', 'node.pages');
//   $form = drupal_get_form('task_node_form', $node);
//   return drupal_render($form);
// }

// function qplot_progress_form_alter(&$form, &$form_state, $form_id) {
//   // dsm($form_id);
// }

/**
 * Custom edit page for task
 */
function qplot_progress_task_edit_form($node) {  
  // dsm($_POST);
  $op = 'View';
  if (!empty($_POST['op'])) {
    $op = $_POST['op'];
  }
  switch ($op) {
    case 'View':
      $edit = !empty($node);

      // determine the phases, projects, selected phase and select project id

      // initial data
      $variables['values'] = array(
        'id' => 0,
        'title' => '',
        'date' => date('m/d/Y'),
        'hours' => '0',
        'description' => '',
        'status' => FALSE,
        'progress' => 0,
        'phases' => array(),
        'phase_id' => 0,
        'project_id' => 0,
      );

      // go through each field and sort out the value based on new or edit
      if ($edit) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        // $progress = $wrapper->field_task_progress->value();
        $project_id = $wrapper->field_task_project->raw();
        $phase_id = $wrapper->field_task_phase->raw();

        $variables['values'] = array(
          'id' => $wrapper->getIdentifier(),
          'title' => $wrapper->title->value(),
          'date' => date('m/d/Y', $wrapper->field_task_added->value()),
          'hours' => $wrapper->field_task_hours->value(),
          'description' => !empty($body) ? $wrapper->body->value->value() : '',
          'progress' => $wrapper->field_task_progress->value(),
        ); 
      } else {
        // get company id
        $project_id = $_GET['project'];
        $phase_id = $_GET['phase'];
      }

      // phase_id is the main chain, $project_id is only the secondary chain
      $phase = node_load($phase_id);
      $phase_wrapper = entity_metadata_wrapper('node', $phase);
      $phases = array();
      foreach ($phase_wrapper->field_phase_project->getIterator() as $project_wrapper) {
        $project = array(
          'id' => $project_wrapper->getIdentifier(),
          'title' => $project_wrapper->title->value(),
          'phases' => array(),
        );

        // get the phases list
        $pnids = qplot_api_find_nodes(
          array('type' => 'phase'),
          array('field_phase_project' => array(
            'target_id', $project_wrapper->getIdentifier(), '='
          )),
          TRUE,
          NULL,
          array('property' => array(
            'created' => 'DESC'
          ))
        );
        $items = array();
        foreach ($pnids as $pid) {
          $node = node_load($pid);
          $items[] = array(
            'id' => $pid, 
            'title' => $node->title,
          );
        }
        $project['phases'] = $items;
        $phases[] = $project;
      }

      // finalize the common values
      $variables['values'] = array_merge($variables['values'], array(
        'phases' => $phases,
        'phase_id' => $phase_id,
        'project_id' => $project_id,
      ));
      $variables['form'] = array(
        'submit' => '',
        'destination' => $_GET['destination'],
      );

      return theme('qplot_progress_task_edit', $variables);
      break;

    case 'Save':
      $edit = !empty($node);

      $wrapper = NULL;
      if (!$edit) {
        $node = entity_create('node', array('type' => 'task'));
        $wrapper = entity_metadata_wrapper('node', $node);
        global $user;
        $node->uid = $user->uid;
      } else {
        $wrapper = entity_metadata_wrapper('node', $node);
      }
      $wrapper->title->set($_POST['title']);
      $date = new DateTime($_POST['date']);
      $wrapper->field_task_added->set($date->getTimestamp());
      $progress = !empty($_POST['completed']) ? 100 : $_POST['progress'];
      $wrapper->field_task_progress->set($progress);
      $hours = explode(' ', $_POST['hours']);
      $wrapper->field_task_hours->set($hours[0]);
      $wrapper->body->set(array(
        'value' => htmlspecialchars($_POST['description']),
        'format' => 'filtered_html',
      ));
      $phase = explode('_', $_POST['phase_id']);
      if (count($phase) > 2) {
        $node->field_task_phase['und'][0]['target_id'] = intval($phase[1]);
        $node->field_task_project['und'][0]['target_id'] = intval($phase[2]);
      }

      // $wrapper->field_task_phase->set(array(array(
      //   'target_id' => intval($_POST['phase_id']),
      //   'target_type' => 'node'
      // )));
      $wrapper->save();

      if (!empty($_POST['destination'])) {
        drupal_set_message('task ' . $_POST['title'] . ' saved');
        drupal_goto($_POST['destination']);
      } else {
        return 'submitted';
      }
      break;
    
    case 'Cancel':
    default:
      if (!empty($_POST['destination'])) {
        drupal_goto($_POST['destination']);
      }
      break;
  }
}

/**
 * Custom edit page for task
 */
function qplot_progress_phase_edit_form($node) {
  // dsm($_POST);
  $op = 'View';
  if (!empty($_POST['op'])) {
    $op = $_POST['op'];
  }
  switch ($op) {
    case 'View':
      $edit = !empty($node);

      // initial data
      $variables['values'] = array(
        'id' => 0,
        'title' => '',
        'from' => date('m/d/Y'),
        'to' => date('m/d/Y'),
        'hours' => '0',
        'description' => '',
        'status' => FALSE,
        'progress' => 0,
        'projects' => array(),
        'project_id' => 0,
      );

      // go through each field and sort out the value based on new or edit
      if ($edit) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        $progress = $wrapper->field_phase_progress->value();
        $project_ids = $wrapper->field_phase_project->raw();
        $duration = $wrapper->field_phase_durating->value();
        $from = new DateTime($duration['value']);
        $to = new DateTime($duration['value2']);

        $variables['values'] = array(
          'id' => $wrapper->getIdentifier(),
          'title' => $wrapper->title->value(),
          'from' => $from->format('m/d/Y'),
          'to' => $to->format('m/d/Y'),
          'progress' => $wrapper->field_phase_progress->value(),
          'hours' => $wrapper->field_phase_hours->value(),
          'description' => !empty($body) ? $wrapper->body->value->value() : '',
          'status' => ($progress == 100),
        ); 
      } else {
        $project_ids = array($_GET['project']);
      }
      
      // get project id from user  
      // $project_id = $_GET['project'];
      $project = node_load($project_ids[0]);
      $project_wrapper = entity_metadata_wrapper('node', $project);
      $company = $project_wrapper->field_project_company->value();
      $company_wrapper = entity_metadata_wrapper('node', $company);

      // get the project list
      $pnids = qplot_api_find_nodes(
        array('type' => 'project'),
        array('field_project_company' => array(
          'target_id', $company_wrapper->getIdentifier(), '='
        )),
        TRUE,
        NULL,
        array('property' => array(
          'created' => 'DESC'
        ))
      );
      $projects = array();
      foreach ($pnids as $pid) {
        $node = node_load($pid);
        $projects[] = array(
          'id' => $pid, 
          'title' => $node->title,
          // 'checked' => in_array($pid, $project_ids),
        );
      }

      // finalize the common values
      $variables['values'] = array_merge($variables['values'], array(
        'projects' => $projects,
        'project_ids' => $project_ids,
      ));
      $variables['form'] = array(
        'submit' => '',
        'destination' => $_GET['destination'],
      );

      return theme('qplot_progress_phase_edit', $variables);
      break;

    case 'Save':
      $edit = !empty($node);

      $wrapper = NULL;
      if (!$edit) {
        $node = entity_create('node', array('type' => 'phase'));
        $wrapper = entity_metadata_wrapper('node', $node);
        global $user;
        $node->uid = $user->uid;
      } else {
        $wrapper = entity_metadata_wrapper('node', $node);
      }
      $wrapper->title->set($_POST['title']);
      $from = new DateTime($_POST['from']);
      $to = new DateTime($_POST['to']);
      $wrapper->field_phase_durating->set(array(
        'value' => $from->format('Y-m-d H:i:s'),
        'value2' => $to->format('Y-m-d H:i:s'),
        'date_type' => 'datetime',
      ));
      // $wrapper->field_task_added->set($date->getTimestamp());
      $wrapper->field_phase_progress->set($_POST['progress']);
      $hours = explode(' ', $_POST['hours']);
      $wrapper->field_phase_hours->set($hours[0]);
      $wrapper->body->set(array(
        'value' => htmlspecialchars($_POST['description']),
        'format' => 'filtered_html',
      ));
      $node->field_phase_project['und'] = array();
      foreach ($_POST['project_ids'] as $value) {
        $node->field_phase_project['und'][]['target_id'] = $value;
      }

      $wrapper->save();

      if (!empty($_POST['destination'])) {
        drupal_set_message('phase: ' . $_POST['title'] . ' saved');
        drupal_goto($_POST['destination']);
      } else {
        return 'submitted';
      }
      break;
    
    case 'Cancel':
    default:
      if (!empty($_POST['destination'])) {
        drupal_goto($_POST['destination']);
      }
      break;
  }
}
