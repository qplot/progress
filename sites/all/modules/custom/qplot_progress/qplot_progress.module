<?php

/**
 * @file
 * QPLOT Progress API.
 * 
 * @author Fang Jin <windmaomao@gmail.com>
 */

include_once 'includes/blocks.php';

/**
 * Implements hook_menu().
 */
function qplot_progress_menu() {

  $items['task/new'] = array(
    'title' => 'Add Task',
    'page callback' => 'qplot_progress_task_edit_form',
    'page arguments' => array(NULL),
    'description' => 'add task.',
    'access callback' => TRUE,
  );
  $items['task/%node/edit'] = array(
    'title' => 'Edit Task',
    'page callback' => 'qplot_progress_task_edit_form',
    'page arguments' => array(1),
    'description' => 'edit task.',
    'access callback' => TRUE,
  );
  $items['phase/new'] = array(
    'title' => 'Add Phase',
    'page callback' => 'qplot_progress_phase_edit_form',
    'page arguments' => array(NULL),
    'description' => 'add phase.',
    'access callback' => TRUE,
  );
  $items['phase/%node/edit'] = array(
    'title' => 'Edit Phase',
    'page callback' => 'qplot_progress_phase_edit_form',
    'page arguments' => array(1),
    'description' => 'edit phase.',
    'access callback' => TRUE,
  );
  $items['project/new'] = array(
    'title' => 'Add Project',
    'page callback' => 'qplot_progress_project_edit_form',
    'page arguments' => array(NULL),
    'description' => 'add project.',
    'access callback' => TRUE,
  );
  $items['project/%node/edit'] = array(
    'title' => 'Edit Project',
    'page callback' => 'qplot_progress_project_edit_form',
    'page arguments' => array(1),
    'description' => 'edit project.',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function qplot_progress_theme() {
  return array(
    // Page.
    'qplot_progress_frontpage' => array(
      'variables' => array(),
      'template' => 'templates/frontpage'
    ),
    'qplot_progress_error_page' => array(
      'variables' => array('error' => NULL),
      'template' => 'templates/error_page'
    ),
    'qplot_progress_front_dashboard' => array(
    'variables' => array(),
    'template' => 'templates/front_dashboard'
    ),

    // Elements.
    'qplot_progress_main_menu' => array(
      'variables' => array('menu' => NULL),
      'template' => 'templates/main_menu'
    ),
    'qplot_progress_project_list' => array(
      'variables' => array('project_list' => NULL),
      'template' => 'templates/projects_list'
    ),
    'qplot_progress_login_full' => array(
      'variables' => array('form' => NULL),
      'template' => 'templates/login_full'
    ),

    // Others.
    'qplot_progress_status_messages' => array(
      'variables' => array('messages' => NULL),
      'template' => 'templates/status_messages'
    ),
    'qplot_progress_user_teaser' => array(
      'variables' => array('user' => NULL),
      'template' => 'templates/user_teaser'
    ),
    'qplot_progress_company_teaser' => array(
      'variables' => array('company' => NULL),
      'template' => 'templates/company_teaser'
    ),
    'qplot_progress_projects_teaser' => array(
      'variables' => array('items' => NULL),
      'template' => 'templates/projects_teaser'
    ),
    'qplot_progress_projects_menu' => array(
      'variables' => array('companies' => NULL),
      'template' => 'templates/projects_menu'
    ),
    'qplot_progress_project_overview' => array(
      'variables' => array('project' => NULL, 'items' => NULL),
      'template' => 'templates/project_overview'
    ),
    'qplot_progress_project_status' => array(
      'variables' => array('project' => NULL),
      'template' => 'templates/project_status'
    ),
    'qplot_progress_company_overview' => array(
      'variables' => array('company' => NULL, 'contacts' => NULL),
      'template' => 'templates/company_overview'
    ),
    'qplot_progress_phases_full' => array(
      'variables' => array('phases' => NULL),
      'template' => 'templates/phases_full'
    ),
    'qplot_progress_phases_table' => array(
      'variables' => array('phases' => NULL),
      'template' => 'templates/phases_table'
    ),
    'qplot_progress_tasks_table' => array(
      'variables' => array('tasks' => NULL),
      'template' => 'templates/tasks_table'
    ),
    'qplot_progress_progress_widget' => array(
      'variables' => array('progress' => 0, 'caption' => TRUE),
      'template' => 'templates/progress_widget'
    ),
    'qplot_progress_members_list' => array(
      'variables' => array('members' => NULL),
      'template' => 'templates/members_list'
    ),
    'qplot_progress_project_members' => array(
      'variables' => array('members' => NULL),
      'template' => 'templates/project_members_list'
    ),
    'qplot_progress_task_edit' => array(
      'variables' => array('values' => NULL),
      'template' => 'templates/task_edit'
    ),
    'qplot_progress_phase_edit' => array(
      'variables' => array('values' => NULL),
      'template' => 'templates/phase_edit'
    ),

    // COMPANY RELATED TEMPLATE.
    'qplot_progress_projects_full' => array(
      'variables' => array('projects' => NULL),
      'template' => 'templates/projects_full'
    ),

    // PROJECT CONTENT RELATED TEMPLATE.
    'qplot_progress_content_list' => array(
      'variables' => array('content' => NULL),
      'template' => 'templates/project_content_list'
    ),
    'qplot_progress_project_edit' => array(
      'variables' => array('values' => NULL),
      'template' => 'templates/project_edit'
    ),
    'qplot_progress_tasks_latest' => array(
      'variables' => array('phases' => NULL),
      'template' => 'templates/tasks_latest'
    ),
  );
}

/**
 * Implementation of hook_block_info().
 */
function qplot_progress_block_info() {
  $blocks = array(
    'frontpage' => array(
      'info' => 'Front Page'
    ),
    'error_page' => array(
      'info' => 'Error Page'
    ),
    'front_dashboard' => array(
      'info' => 'Front Dashboard'
    ),
    'main_menu' => array(
      'info' => 'Client Menu'
    ),
    'login_full' => array(
      'info' => 'Front Login'
    ),
    // Company mini teaser in sidebar menu area.
    'company_teaser' => array(
      'info' => ('Company Teaser')
    ),
    // Projects mini teasers in sidebar menu area, favorites, flat.
    'projects_teaser' => array(
      'info' => ('Projects Teaser')
    ),
    // Projects menu in sidebar menu area, categorized by company hierarchy.
    'projects_menu' => array(
      'info' => ('Projects Menu')
    ),
    // Project overview teaser in main content area.
    'project_overview' => array(
      'info' => ('Project Overview')
    ),
    // Project status in main content area.
    'project_status' => array(
      'info' => ('Project Status')
    ),
    // Company overview teaser in main content area.
    'company_overview' => array(
      'info' => ('Company Overview')
    ),
    // Phases tab full in main content area.
    'phases_full' => array(
      'info' => ('Phases Tab Listing')
    ),
    // Phases table in main content area.
    'phases_table' => array(
      'info' => ('Phases Table')
    ),
    // Tasks table of specific phase.
    'tasks_table' => array(
      'info' => ('Tasks Table')
    ),
    // Company members list in main content area.
    'members_list' => array(
      'info' => ('Company Members List')
    ),
    // Company members list in main content area.
    'project_members' => array(
      'info' => ('Project Members List')
    ),
    // Company projects list in main content area.
    'projects_full' => array(
      'info' => ('Company Projects List')
    ),
    // Project content list in main content area.
    'content_list' => array(
      'info' => ('Project Content List')
    ),
    'project_list' => array(
      'info' => ('Project List')
    ),
    'tasks_latest' => array(
      'info' => ('Latest Tasks')
    ),
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function qplot_progress_block_view($delta = '') {
  global $user;
  $block = array();
  $block['content'] = '';
  $callback = __FUNCTION__ . '_' . $delta;
  // call_user_func(__FUNCTION__ . '_' . $delta, array(&$block));
  // qplot_progress_block_view_main_menu($block);

  switch ($delta) {
    case 'frontpage':
      $block['content'] = theme('qplot_progress_frontpage');
      break;

    case 'error_page':
      $error = '';
      $desc = "We seem to have lost you in the clouds";
      $msg = "The page your looking for is not here";

      $error = arg(1);

      switch ($error) {
        case '403':
          $desc = "Whoops! Try look somewhere else";
          $msg = 'Not authorized to access this page';
          break;

        case '404':
          break;

        default:
          $error = ':)';
          $desc = "Haha, you found our eastern egg";
          $msg = "QPLOT makes CMS work";
          break;
      }

      $variables = array(
        'error' => $error,
        'description' => $desc,
        'message' => $msg,
      );
      $block['content'] = theme('qplot_progress_error_page', $variables);
      break;

    case 'front_dashboard':
    case 'main_menu':
    case 'login_full':
    case 'company_teaser':
    case 'projects_teaser':
    case 'projects_menu':
    case 'project_overview':
    case 'project_status':
    case 'company_overview':
    case 'phases_full':
    case 'phases_table':
    case 'tasks_table':
    case 'members_list':
    case 'project_members':
    case 'projects_full':
    case 'content_list':
    case 'project_list':
      $callback($block);
      break;

    default:
      break;
  }

  return $block;
}

/**
 * Update views render.
 *
 * With respect to views template, settings are all data
 * Implements buttons on all admin views
 */
function qplot_progress_views_pre_render(&$view) {
  // dsm($view);
  // dsm($view->display_handler);
  // dsm($view->field['edit_node']);
  // Add a icon to edit button.
  // $edit = &$view->field['edit_node'];
  // $edit->options['label'] = "";
  // $edit->options['alter']['alter_text'] = TRUE;
  // $edit->options['alter']['text'] = '<i class="fa fa-edit"></i>';

  // Add button for view page.
  $pages = array(
    'leads' => 'lead',
    'contacts' => 'contact',
    'companies' => 'company',
    'projects' => 'project',
  );
  $name = $view->name;
  switch ($name) {
    case 'contacts':
    case 'leads':
    case 'companies':
    case 'projects':
      $view->header['area']->options['content'] = theme('views_link', array(
        'text' => '<i class="fa fa-plus"></i> Add ' . ucfirst($pages[$name]),
        'path' => 'node/add/' . $pages[$name],
        'query' => drupal_get_destination(),
        'classes' => array('btn', 'btn-success', 'pull-right'),
        'parent-classes' => array('clearfix'),
      ));
      break;

    default:
      break;
  }
  // Change field-project-progress.
  if ($name == 'projects') {
    foreach ($view->result as &$row) {
      $progress = $row->_field_data['nid']['entity']->field_project_progress['und'][0]['value'];
      $row->field_field_project_progress[0]['rendered'] = theme(
        'qplot_progress_progress_widget', array(
          'progress' => $progress,
          'caption' => TRUE,
        )
      );

    }
  }

  // dsm($view);
}

/**
 * Update views structure.
 */
function qplot_progress_views_pre_build(&$view) {
  // dsm($view);
  // dsm($view->field['edit_node']);
  // $edit = &$view->field['edit_node'];
  // $edit->options['label'] = '';
  // dsm($view->display_handler);
  // dsm($view->display_handler)
}

/**
 * Update phase progress based on its tasks.
 *
 * @param object $node
 *   Tasks node object
 */
function qplot_progress_update_phase_progress($node) {
  // dsm($node);
  // Find task's phase.
  $delete = !isset($node->is_new);
  $twrapper = entity_metadata_wrapper('node', $node);
  $tid = $twrapper->getIdentifier();
  $pid = $twrapper->field_task_phase->raw();
  $prid = $twrapper->field_task_project->raw();

  // Find all tasks belonging to that phase.
  $tnids = qplot_api_find_nodes2(
    array(
      'type' => 'task',
      'field_task_phase' => array('target_id', $pid, '='),
      'field_task_project' => array('target_id', $prid, '='),
    ),
    NULL,
    TRUE
  );

  $hours = 0.0;
  $progress = 0;
  foreach ($tnids as $nid) {
    if ($tid == $nid) {
      // For delete operation, skip this record.
      if ($delete) {
        continue;
      }
      // For save operation, use the latest record.
      $h = $twrapper->field_task_hours->value();
      $hours = $hours + $h;
      $progress = $progress + $twrapper->field_task_progress->value() * $h / 100;
    }
    else {
      $task = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $task);

      $h = $wrapper->field_task_hours->value();
      $hours = $hours + $h;
      $progress = $progress + $wrapper->field_task_progress->value() * $h / 100;
    }
  }
  $progress = !empty($hours) ? round($progress / $hours * 100) : 0;

  $phase = node_load($pid);
  $wrapper = entity_metadata_wrapper('node', $phase);
  $wrapper->field_phase_hours->set($hours);
  $wrapper->field_phase_progress->set($progress);
  $wrapper->save();

  // @codingStandardsIgnoreStart
  // Create message for notification.
  // global $user;
  // $message = message_create('task', array('uid' => $user->uid));
  // $wrapper = entity_metadata_wrapper('message', $message);
  // if (!$delete) {
  //   $wrapper->field_message_node->set($node);
  // }
  // $wrapper->save();
  // @codingStandardsIgnoreEnd
}

/**
 * Update project progress based on its phases.
 *
 * @param object $node
 *   Tasks node object
 */
function qplot_progress_update_project_progress($node) {
  // dsm($node);
  // Find phase's project.
  $delete = !isset($node->is_new);
  $current_phase_id = $node->nid;
  $current_phase_wrapper = entity_metadata_wrapper('node', $node);
  $project_ids = $current_phase_wrapper->field_phase_project->raw();

  // Update has two schemas.
  $all = TRUE;

  // For each project we're going to update their status.
  foreach ($project_ids as $project_id) {
    if ($all) {
      // Update according to all phases.

      // Find all phases belonging to this project.
      $phase_ids = qplot_api_find_nodes2(
        array(
          'type' => 'phase',
          'field_phase_project' => array('target_id', $project_id, '='),
        ),
        NULL,
        TRUE
      );

      $hours = 0;
      $progress = 0;
      $capability = 0;
      foreach ($phase_ids as $phase_id) {
        // Since the record is not updated in database yet.
        // We have to fetch it here.
        if ($phase_id == $current_phase_id) {
          if ($delete) {
            continue;
          }
          $phase_wrapper = $current_phase_wrapper;
        }
        else {
          $phase = node_load($phase_id);
          $phase_wrapper = entity_metadata_wrapper('node', $phase);
        }
        $h = $phase_wrapper->field_phase_hours->value();
        $hours = $hours + $h;
        $progress = $progress + $phase_wrapper->field_phase_progress->value() * $h / 100;
      }
      $progress = !empty($hours) ? round($progress / $hours * 100) : 0;
    }
    else {
      // Update according to the latest phase that has been updated.
      $progress = $pwrapper->field_phase_progress->value();
    }

    // Update project record.
    $project = node_load($project_id);
    $wrapper = entity_metadata_wrapper('node', $project);
    $wrapper->field_project_hours->set($hours);
    $wrapper->field_project_progress->set($progress);
    $wrapper->save();
  }
}

/**
 * Get user profile.
 */
function qplot_progress_user_profile($uid) {
  if ($uid) {
    $user = user_load($uid);
    $uwrapper = entity_metadata_wrapper('user', $user);

    // Get profile info.
    $profile = profile2_load_by_user(intval($uid));
    $wrapper = entity_metadata_wrapper('profile2', $profile['main']);
    $photo = $wrapper->field_profile_photo->value();

    // Get company info.
    $company = array();
    $project = array();
    if ($uid > 1) {
      foreach ($uwrapper->og_user_node->getIterator() as $nwrapper) {
        $type = $nwrapper->type->value();
        switch ($type) {
          case 'company':
            $company[] = array(
              'id' => $nwrapper->getIdentifier(),
              'title' => $nwrapper->title->value(),
              'view' => url('company/' . $nwrapper->getIdentifier()),
            );
            break;

          case 'project':
            $icon = $nwrapper->field_project_icon->value();
            $body = $nwrapper->body->value();
            $project[] = array(
              'id' => $nwrapper->getIdentifier(),
              'title' => $nwrapper->title->value(),
              'view' => url('project/' . $nwrapper->getIdentifier()),
              'icon' => !empty($icon) ? $icon->name : '',
              'description' => !$body['value'] ? $body['value'] : '',
              'progress' => $nwrapper->field_project_progress->value(),
              'status' => $nwrapper->field_project_status->name->value(),
            );
            break;

          default:
            break;
        }
      }
    }

    return array(
      'id' => $user->uid,
      'name' => $user->name,
      'roles' => $user->roles,
      'first' => $wrapper->field_profile_first->value(),
      'last' => $wrapper->field_profile_last->value(),
      'title' => $wrapper->field_profile_title->value(),
      'photo' => !empty($photo) ? $wrapper->field_profile_photo->file->url->value() : '',
      'company' => $company,
      'project' => $project,
      'logout' => url('user/logout'),
    );
  }
  else {
    return '';
  }
}

/**
 * Get project member list.
 */
function qplot_progress_project_members($project_id) {
  // Find members list.
  $mids = qplot_api_find_nodes(
    array('gid' => $project_id),
    NULL,
    TRUE,
    array('entity_type' => 'og_membership')
  );
  $members = array();
  foreach ($mids as $mid) {
    $membership = og_membership_load($mid);
    $member_wrapper = entity_metadata_wrapper('og_membership', $membership);
    $uid = $membership->etid;

    // Skip system admin user.
    if ($uid == 1) {
      continue;
    }

    $profile = profile2_load_by_user($uid);
    // dsm($profile);
    $wrapper = entity_metadata_wrapper('profile2', $profile['main']);
    $photo = $wrapper->field_profile_photo->value();

    $member_item = array(
      'id' => $uid,
      'first' => $wrapper->field_profile_first->value(),
      'last' => $wrapper->field_profile_last->value(),
      'title' => $member_wrapper->field_og_membership_title->value(),
      'photo' => !empty($photo) ? $wrapper->field_profile_photo->file->url->value() : '',
      'companies' => array(),
    );

    // Find out user's company.
    $account = user_load($uid);
    $nids = og_get_groups_by_user($account);
    foreach ($nids['node'] as $nid) {
      $node = node_load(intval($nid));
      $cwrapper = entity_metadata_wrapper('node', $node);
      if ($node->type == 'company') {
        $icon = $cwrapper->field_company_icon->value();
        $member_item['companies'][] = array(
          'id' => $node->nid,
          'icon' => !empty($icon) ? $cwrapper->field_company_icon->file->url->value() : '',
        );
      }
    }
    $members[] = $member_item;
  }

  return $members;
}

/**
 * Custom edit page for task.
 */
function qplot_progress_task_edit_form($node) {
  // dsm($_POST);
  $op = 'View';
  if (!empty($_POST['op'])) {
    $op = $_POST['op'];
  }
  switch ($op) {
    case 'View':
      $edit = !empty($node);

      // Load js.
      $jss = array(
        'plugins/bootstrap-datepicker/js/bootstrap-datepicker.js',
        'plugins/bootstrap-timepicker/js/bootstrap-timepicker.min.js',
        'plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.js',
        'plugins/jquery-inputmask/jquery.inputmask.min.js',
        'plugins/jquery-autonumeric/autoNumeric.js',
        'plugins/ios-switch/ios7-switch.js',
        'plugins/bootstrap-select2/select2.min.js',
        'plugins/bootstrap-tag/bootstrap-tagsinput.min.js',
        'plugins/bootstrap-wysihtml5/wysihtml5-0.3.0.js',
        'plugins/bootstrap-wysihtml5/bootstrap-wysihtml5.js',
        'plugins/dropzone/dropzone.min.js',
        'plugins/boostrap-slider/js/bootstrap-slider.js',
        'plugins/jquery-easy-pie-chart/js/jquery.easypiechart.min.js',
        'js/form_elements.js',
      );
      $path = drupal_get_path('theme', 'webarch') . '/assets/';
      foreach ($jss as $js) {
        drupal_add_js($path . $js, array('scope' => 'footer'));
      }

      // Initial data.
      $variables['values'] = array(
        'id' => 0,
        'title' => '',
        'date' => date('m/d/Y'),
        'hours' => '0',
        'description' => '',
        'caption' => '',
        'url' => '',
        'status' => FALSE,
        'progress' => 0,
        'phases' => array(),
        'phase_id' => 0,
        'project_id' => 0,
        'user_id' => '',
        'tag_id' => '',
      );

      // Go through each field and sort out the value based on new or edit.
      if ($edit) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        $url = $wrapper->field_task_url->value();
        // $progress = $wrapper->field_task_progress->value();
        $project_id = $wrapper->field_task_project->raw();
        $phase_id = $wrapper->field_task_phase->raw();
        $user_id = $wrapper->field_task_requestby->raw();

        $variables['values'] = array(
          'id' => $wrapper->getIdentifier(),
          'title' => $wrapper->title->value(),
          'date' => date('m/d/Y', $wrapper->field_task_added->value()),
          'caption' => !empty($url) ? $url['title'] : '',
          'url' => !empty($url) ? $url['url'] : '',
          'hours' => $wrapper->field_task_hours->value(),
          'description' => !empty($body) ? $wrapper->body->value->value() : '',
          'progress' => $wrapper->field_task_progress->value(),
          'user_id' => !empty($user_id) ? $wrapper->field_task_requestby->raw() : '',
          'tag_id' => $wrapper->field_task_tag->raw(),
        );
      }
      else {
        // Get company id.
        $project_id = $_GET['project'];
        $phase_id = $_GET['phase'];
      }

      // Phase_id is the main chain, $project_id is only the secondary chain.
      $phase = node_load($phase_id);
      $phase_wrapper = entity_metadata_wrapper('node', $phase);
      $phases = array();
      foreach ($phase_wrapper->field_phase_project->getIterator() as $project_wrapper) {
        $project = array(
          'id' => $project_wrapper->getIdentifier(),
          'title' => $project_wrapper->title->value(),
          'phases' => array(),
        );

        // Get the phases list.
        $pnids = qplot_api_find_nodes(
          array('type' => 'phase'),
          array(
            'field_phase_project' => array(
              'target_id', $project_wrapper->getIdentifier(), '='
            )
          ),
          TRUE,
          NULL,
          array(
            'field_phase_durating' => array('value', 'ASC')
          )
        );
        $items = array();
        foreach ($pnids as $pid) {
          $node = node_load($pid);
          $items[] = array(
            'id' => $pid,
            'title' => $node->title,
          );
        }
        $project['phases'] = $items;
        $phases[] = $project;
      }

      // Get a list of all tags.
      $vid = taxonomy_vocabulary_machine_name_load('task_tag')->vid;
      $tree = taxonomy_get_tree($vid);
      $variables['tags'] = array();
      foreach ($tree as $value) {
        $variables['tags'][] = array(
          'id' => $value->tid,
          'name' => $value->name,
        );
      }

      // Get all members in this project.
      $variables['members'] = qplot_progress_project_members($project_id);

      // Finalize the common values.
      $variables['values'] = array_merge($variables['values'], array(
        'phases' => $phases,
        'phase_id' => $phase_id,
        'project_id' => $project_id,
      ));
      $variables['form'] = array(
        'submit' => '',
        'destination' => $_GET['destination'],
      );

      return theme('qplot_progress_task_edit', $variables);

    case 'Save':
      $edit = !empty($node);

      $wrapper = NULL;
      if (!$edit) {
        $node = entity_create('node', array('type' => 'task'));
        $wrapper = entity_metadata_wrapper('node', $node);
        global $user;
        $node->uid = $user->uid;
      }
      else {
        $wrapper = entity_metadata_wrapper('node', $node);
      }
      $wrapper->title->set($_POST['title']);
      $date = new DateTime($_POST['date']);
      $wrapper->field_task_added->set($date->getTimestamp());
      $progress = !empty($_POST['completed']) ? 100 : $_POST['progress'];
      $wrapper->field_task_progress->set($progress);
      $hours = explode(' ', $_POST['hours']);
      $wrapper->field_task_hours->set($hours[0]);
      $wrapper->body->set(array(
        'value' => htmlspecialchars($_POST['description']),
        'format' => 'filtered_html',
      ));
      $wrapper->field_task_url->set(array(
        'title' => $_POST['caption'],
        'url' => $_POST['url'],
      ));
      if (!empty($_POST['member_id'])) {
        $node->field_task_requestby['und'][0]['target_id'] = $_POST['member_id'];
      }
      if (!empty($_POST['tag_id'])) {
        $wrapper->field_task_tag->set($_POST['tag_id']);
      }

      $phase = explode('_', $_POST['phase_id']);
      if (count($phase) > 2) {
        $node->field_task_phase['und'][0]['target_id'] = intval($phase[1]);
        $node->field_task_project['und'][0]['target_id'] = intval($phase[2]);
      }

      $wrapper->save();

      if (!empty($_POST['destination'])) {
        drupal_set_message('task ' . $_POST['title'] . ' saved');
        drupal_goto($_POST['destination']);
      }
      else {
        return 'submitted';
      }
      break;

    case 'Cancel':
    default:
      if (!empty($_POST['destination'])) {
        drupal_goto($_POST['destination']);
      }
      break;
  }
}

/**
 * Custom edit page for phase.
 */
function qplot_progress_phase_edit_form($node) {
  // dsm($_POST);
  $op = 'View';
  if (!empty($_POST['op'])) {
    $op = $_POST['op'];
  }
  switch ($op) {
    case 'View':
      $edit = !empty($node);

      // Initial data.
      $variables['values'] = array(
        'id' => 0,
        'title' => '',
        'from' => date('m/d/Y'),
        'to' => date('m/d/Y'),
        'hours' => '0',
        'progress' => 0,
        'description' => '',
        'status' => 0,
        'capacity' => 0,
        'projects' => array(),
        'project_id' => 0,
      );

      // Go through each field and sort out the value based on new or edit.
      if ($edit) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        $progress = $wrapper->field_phase_progress->value();
        $project_ids = $wrapper->field_phase_project->raw();
        $duration = $wrapper->field_phase_durating->value();
        $from = new DateTime($duration['value']);
        $to = new DateTime($duration['value2']);

        $variables['values'] = array(
          'id' => $wrapper->getIdentifier(),
          'title' => $wrapper->title->value(),
          'from' => $from->format('m/d/Y'),
          'to' => $to->format('m/d/Y'),
          'progress' => $wrapper->field_phase_progress->value(),
          'hours' => $wrapper->field_phase_hours->value(),
          'description' => !empty($body) ? $wrapper->body->value->value() : '',
          'status_id' => $wrapper->field_phase_status->raw(),
          // 'capacity' => $wrapper->field_phase_capacity->value(),
        );
      }
      else {
        $project_ids = array($_GET['project']);
      }

      // Get phase status list.
      $vid = taxonomy_vocabulary_machine_name_load('phase_status')->vid;
      $tree = taxonomy_get_tree($vid);
      $variables['status'] = array();
      foreach ($tree as $value) {
        $variables['status'][] = array(
          'id' => $value->tid,
          'name' => $value->name,
        );
      }

      // Get project id from user.
      // $project_id = $_GET['project'];
      $project = node_load($project_ids[0]);
      $project_wrapper = entity_metadata_wrapper('node', $project);
      $company = $project_wrapper->field_project_company->value();
      $company_wrapper = entity_metadata_wrapper('node', $company);

      // Get the project list.
      $pnids = qplot_api_find_nodes(
        array('type' => 'project'),
        array(
          'field_project_company' => array(
            'target_id', $company_wrapper->getIdentifier(), '='
          )
        ),
        TRUE,
        NULL,
        array(
          'property' => array(
            'created' => 'DESC'
          )
        )
      );
      $projects = array();
      foreach ($pnids as $pid) {
        $node = node_load($pid);
        $projects[] = array(
          'id' => $pid,
          'title' => $node->title,
          // 'checked' => in_array($pid, $project_ids),
        );
      }

      // Finalize the common values.
      $variables['values'] = array_merge($variables['values'], array(
        'projects' => $projects,
        'project_ids' => $project_ids,
      ));
      $variables['form'] = array(
        'submit' => '',
        'destination' => $_GET['destination'],
      );

      return theme('qplot_progress_phase_edit', $variables);

    case 'Save':
      $edit = !empty($node);

      $wrapper = NULL;
      if (!$edit) {
        $node = entity_create('node', array('type' => 'phase'));
        $wrapper = entity_metadata_wrapper('node', $node);
        global $user;
        $node->uid = $user->uid;
      }
      else {
        $wrapper = entity_metadata_wrapper('node', $node);
      }
      $wrapper->title->set($_POST['title']);
      $from = new DateTime($_POST['from']);
      $to = new DateTime($_POST['to']);
      $wrapper->field_phase_durating->set(array(
        'value' => $from->format('Y-m-d H:i:s'),
        'value2' => $to->format('Y-m-d H:i:s'),
        'date_type' => 'datetime',
      ));
      // $wrapper->field_task_added->set($date->getTimestamp());
      // $wrapper->field_phase_progress->set($_POST['progress']);
      // $hours = explode(' ', $_POST['hours']);
      // $wrapper->field_phase_hours->set($hours[0]);
      $wrapper->field_phase_status->set($_POST['status_id']);
      // $wrapper->field_phase_capacity->set($_POST['capacity']);
      $wrapper->body->set(array(
        'value' => htmlspecialchars($_POST['description']),
        'format' => 'filtered_html',
      ));
      $node->field_phase_project['und'] = array();
      foreach ($_POST['project_ids'] as $value) {
        $node->field_phase_project['und'][]['target_id'] = $value;
      }

      $wrapper->save();

      if (!empty($_POST['destination'])) {
        drupal_set_message('phase: ' . $_POST['title'] . ' saved');
        drupal_goto($_POST['destination']);
      }
      else {
        return 'submitted';
      }
      break;

    case 'Cancel':
    default:
      if (!empty($_POST['destination'])) {
        drupal_goto($_POST['destination']);
      }
      break;
  }
}

/**
 * Custom edit page for project.
 */
function qplot_progress_project_edit_form($node) {
  // dsm($_POST);
  $op = 'View';
  if (!empty($_POST['op'])) {
    $op = $_POST['op'];
  }
  switch ($op) {
    case 'View':
      $edit = !empty($node);

      // Initial data.
      $variables['values'] = array(
        'id' => 0,
        'title' => '',
        'caption' => '',
        'url' => '',
        'capacity' => '0',
        'description' => '',
        'status' => TRUE,
        'progress' => 0,
        'icon' => '',
        'photo' => '',
        'content' => array(),
        'pages' => array(),
      );

      // Go through each field and sort out the value based on new or edit.
      if ($edit) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $body = $wrapper->body->value();
        $url = $wrapper->field_project_url->value();
        $icon = $wrapper->field_project_icon->value();
        $photo = $wrapper->field_project_photo->value();

        $variables['values'] = array(
          'id' => $wrapper->getIdentifier(),
          'title' => $wrapper->title->value(),
          'caption' => !empty($url) ? $url['title'] : '',
          'url' => !empty($url) ? $url['url'] : '',
          'icon' => !empty($icon) ? (array) $icon : array(),
          'progress' => $wrapper->field_project_progress->value(),
          'capacity' => $wrapper->field_project_capacity->value(),
          'description' => !empty($body) ? $wrapper->body->value->value() : '',
          'photo' => !empty($photo) ? file_create_url($photo['uri']) : '',
          'status' => TRUE,
        );
      }
      else {
        // $project_ids = array($_GET['project']);
      }

      // Get a list of all icon.
      $vid = taxonomy_vocabulary_machine_name_load('icons')->vid;
      $tree = taxonomy_get_tree($vid);
      $variables['icons'] = array();
      foreach ($tree as $value) {
        $variables['icons'][] = array(
          'id' => $value->tid,
          'name' => $value->name,
        );
      }

      // Get the list of content.
      $ids = qplot_api_find_nodes2(
        array(
          'type' => 'content',
          'field_content_project' => array(
            'target_id', $wrapper->getIdentifier(), '='
          ),
        ),
        array(
          'created' => 'ASC'
        ),
        TRUE
      );

      $variables['content'] = array();
      foreach ($ids as $id) {
        $content = node_load($id);
        $variables['content'][] = $content->title;
      }

      // Finalize the common values.
      $variables['values'] = array_merge($variables['values'], array(
        // 'projects' => $projects,
        // 'project_ids' => $project_ids,
      ));
      $variables['form'] = array(
        'submit' => '',
        'destination' => $_GET['destination'],
      );

      return theme('qplot_progress_project_edit', $variables);

    case 'Save':
      $edit = !empty($node);

      $wrapper = NULL;
      if (!$edit) {
        $node = entity_create('node', array('type' => 'project'));
        $wrapper = entity_metadata_wrapper('node', $node);
        global $user;
        $node->uid = $user->uid;
      }
      else {
        $wrapper = entity_metadata_wrapper('node', $node);
      }
      $wrapper->title->set($_POST['title']);
      $wrapper->field_project_progress->set($_POST['progress']);
      $wrapper->field_project_capacity->set($_POST['capacity']);
      $wrapper->body->set(array(
        'value' => htmlspecialchars($_POST['description']),
        'format' => 'filtered_html',
      ));
      $wrapper->field_project_url->set(array(
        'title' => $_POST['caption'],
        'url' => $_POST['url'],
      ));
      $wrapper->field_project_icon->set($_POST['icon']);

      $wrapper->save();

      if (!empty($_POST['destination'])) {
        drupal_set_message('phase: ' . $_POST['title'] . ' saved');
        drupal_goto($_POST['destination']);
      }
      else {
        return 'submitted';
      }
      break;

    case 'Cancel':
    default:
      if (!empty($_POST['destination'])) {
        drupal_goto($_POST['destination']);
      }
      break;
  }
}
